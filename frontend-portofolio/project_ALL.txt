==================================================
STRUKTUR FOLDER (DAFTAR FILE)
==================================================
portofolio/.env
portofolio/.gitignore
portofolio/backend-portofolio/cmd/server/main.go
portofolio/backend-portofolio/Dockerfile
portofolio/backend-portofolio/go.mod
portofolio/backend-portofolio/go.sum
portofolio/backend-portofolio/internal/config/config.go
portofolio/backend-portofolio/internal/db/db.go
portofolio/backend-portofolio/internal/handlers/achievement_handler.go
portofolio/backend-portofolio/internal/handlers/auth_handler.go
portofolio/backend-portofolio/internal/handlers/experience_handler.go
portofolio/backend-portofolio/internal/handlers/profile_handler.go
portofolio/backend-portofolio/internal/handlers/project_handler.go
portofolio/backend-portofolio/internal/handlers/skill_handler.go
portofolio/backend-portofolio/internal/handlers/upload_handler.go
portofolio/backend-portofolio/internal/middleware/cors.go
portofolio/backend-portofolio/internal/middleware/jwt.go
portofolio/backend-portofolio/internal/models/achievement.go
portofolio/backend-portofolio/internal/models/experience.go
portofolio/backend-portofolio/internal/models/profile.go
portofolio/backend-portofolio/internal/models/project.go
portofolio/backend-portofolio/internal/models/skill.go
portofolio/backend-portofolio/internal/server/router.go
portofolio/docker-compose.yml
portofolio/frontend-portofolio/.env.local
portofolio/frontend-portofolio/.gitignore
portofolio/frontend-portofolio/eslint.config.js
portofolio/frontend-portofolio/index.css
portofolio/frontend-portofolio/index.html
portofolio/frontend-portofolio/package.json
portofolio/frontend-portofolio/src/api/achievements.js
portofolio/frontend-portofolio/src/api/axios.js
portofolio/frontend-portofolio/src/api/client.js
portofolio/frontend-portofolio/src/api/experiences.js
portofolio/frontend-portofolio/src/api/profile.js
portofolio/frontend-portofolio/src/api/projects.js
portofolio/frontend-portofolio/src/api/skills.js
portofolio/frontend-portofolio/src/App.jsx
portofolio/frontend-portofolio/src/auth/authContext.js
portofolio/frontend-portofolio/src/auth/AuthProvider.jsx
portofolio/frontend-portofolio/src/auth/PrivateRoute.jsx
portofolio/frontend-portofolio/src/auth/useAuth.js
portofolio/frontend-portofolio/src/components/admin/AchievementFormModal.jsx
portofolio/frontend-portofolio/src/components/admin/DropzoneUpload.jsx
portofolio/frontend-portofolio/src/components/admin/ExperienceFormModal.jsx
portofolio/frontend-portofolio/src/components/admin/GalleryManager.jsx
portofolio/frontend-portofolio/src/components/admin/ImageCropper.jsx
portofolio/frontend-portofolio/src/components/admin/ProjectForm.jsx
portofolio/frontend-portofolio/src/components/admin/ProjectPreview.jsx
portofolio/frontend-portofolio/src/components/admin/SkillFormModal.jsx
portofolio/frontend-portofolio/src/components/admin/SkillGroupOrderManager.jsx
portofolio/frontend-portofolio/src/components/admin/SocialLinksManager.jsx
portofolio/frontend-portofolio/src/components/admin/UploadButton.jsx
portofolio/frontend-portofolio/src/components/common/ThemeToggle.jsx
portofolio/frontend-portofolio/src/components/layout/admin/AdminHeader.jsx
portofolio/frontend-portofolio/src/components/layout/admin/AdminLayout.jsx
portofolio/frontend-portofolio/src/components/layout/Footer.jsx
portofolio/frontend-portofolio/src/components/layout/Header.jsx
portofolio/frontend-portofolio/src/components/public/ExperienceTimeline.jsx
portofolio/frontend-portofolio/src/components/public/Gallery.jsx
portofolio/frontend-portofolio/src/components/public/Lightbox.jsx
portofolio/frontend-portofolio/src/components/public/ProfileHeader.jsx
portofolio/frontend-portofolio/src/components/public/ProjectBody.jsx
portofolio/frontend-portofolio/src/components/public/ProjectCard.jsx
portofolio/frontend-portofolio/src/components/public/SkillChips.jsx
portofolio/frontend-portofolio/src/components/ui/AnimatedBackground.jsx
portofolio/frontend-portofolio/src/components/ui/Interactive3D.jsx
portofolio/frontend-portofolio/src/index.css
portofolio/frontend-portofolio/src/main.jsx
portofolio/frontend-portofolio/src/pages/About.jsx
portofolio/frontend-portofolio/src/pages/admin/AdminAchievements.jsx
portofolio/frontend-portofolio/src/pages/admin/AdminExperiences.jsx
portofolio/frontend-portofolio/src/pages/admin/AdminProfile.jsx
portofolio/frontend-portofolio/src/pages/admin/AdminProjects.jsx
portofolio/frontend-portofolio/src/pages/admin/AdminSkills.jsx
portofolio/frontend-portofolio/src/pages/admin/Dashboard.jsx
portofolio/frontend-portofolio/src/pages/admin/Login.jsx
portofolio/frontend-portofolio/src/pages/admin/ProjectEdit.jsx
portofolio/frontend-portofolio/src/pages/Home.jsx
portofolio/frontend-portofolio/src/pages/ProjectDetail.jsx
portofolio/frontend-portofolio/src/pages/Projects.jsx
portofolio/frontend-portofolio/src/providers/colorMode.js
portofolio/frontend-portofolio/src/providers/ColorModeProvider.jsx
portofolio/frontend-portofolio/src/theme.js
portofolio/frontend-portofolio/src/utils/confirm.js
portofolio/frontend-portofolio/src/utils/slugify.js
portofolio/frontend-portofolio/src/utils/url.js
portofolio/frontend-portofolio/vite.config.js


==================================================
ISI KODE
==================================================

--- START FILE: portofolio/.env ---
# /.env
APP_PORT=8080

DB_HOST=db
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=postgres
DB_NAME=portfolio

JWT_SECRET=p0rt0f0l10V1C0

ADMIN_EMAIL=vicotriansyahnasril@gmail.com
ADMIN_PASSWORD=V1c0123
UPLOAD_DIR=/app/storage/uploads

CORS_ORIGINS=http://localhost:5173, http://127.0.0.1:5173

--- END FILE: portofolio/.env ---

--- START FILE: portofolio/.gitignore ---
# ===================================================================
# .gitignore Utama untuk Monorepo Portofolio (Backend Go + Frontend React)
# ===================================================================

# 1. Rahasia & File Lingkungan (Secrets & Environment Files)
# Abaikan file .env yang berisi kunci API, password database, dll.
.env
*.env.local
*.env.*.local

# 2. Dependensi & Build Artifacts
# -------------------------------------------------------------------

# Frontend (Node.js / React / Vite)
frontend-portofolio/node_modules/
frontend-portofolio/dist/
frontend-portofolio/build/

# Backend (Go)
# Abaikan binary hasil kompilasi.
backend-portofolio/server
backend-portofolio/*.exe
backend-portofolio/*.out

# Abaikan folder 'vendor' jika Anda menggunakan `go mod vendor`.
# Biarkan `go.sum` di dalam repositori untuk build yang konsisten.
backend-portofolio/vendor/

# 3. Data Runtime & Unggahan Pengguna (Runtime Data & User Uploads)
# -------------------------------------------------------------------

# Abaikan data volume Docker dari database.
db_data/

# Abaikan SEMUA file di dalam folder 'uploads',
# TAPI jangan abaikan file .gitkeep agar foldernya tetap ada.
# Ini memastikan folder 'uploads' selalu dibuat saat clone.
uploads/*
!uploads/.gitkeep

# 4. Log Files
# -------------------------------------------------------------------
logs/
*.log
npm-debug.log*
yarn-debug.log*
pnpm-debug.log*

# 5. File Spesifik IDE & Sistem Operasi (IDE & OS Specific)
# -------------------------------------------------------------------
.idea/
.vscode/
*.swp
*.swo
.DS_Store
Thumbs.db
--- END FILE: portofolio/.gitignore ---

--- START FILE: portofolio/backend-portofolio/cmd/server/main.go ---
// cmd/server/main.go
package main

import (
	"log"
	"os"

	"backend-portofolio/internal/config"
	"backend-portofolio/internal/db"
	"backend-portofolio/internal/server"
)

func main() {
	cfg := config.Load()

	db.Init(cfg)

	if err := os.MkdirAll(cfg.UploadDir, 0o755); err != nil {
		log.Fatalf("create upload dir error: %v", err)
	}

	r := server.SetupRouter(&cfg)

	addr := ":" + cfg.AppPort
	if p := os.Getenv("PORT"); p != "" {
		addr = ":" + p
	}
	log.Printf("listening on %s", addr)
	if err := r.Run(addr); err != nil {
		log.Fatal(err)
	}
}

--- END FILE: portofolio/backend-portofolio/cmd/server/main.go ---

--- START FILE: portofolio/backend-portofolio/Dockerfile ---
# backend-portofolio/Dockerfile
FROM golang:1.23-alpine AS builder
WORKDIR /app
RUN apk add --no-cache git
COPY go.mod ./
RUN go mod download
COPY . .
RUN CGO_ENABLED=0 GOOS=linux go build -o server ./cmd/server

FROM gcr.io/distroless/base-debian12
WORKDIR /app
COPY --from=builder /app/server /app/server
ENV APP_PORT=8080
EXPOSE 8080
CMD ["/app/server"]

--- END FILE: portofolio/backend-portofolio/Dockerfile ---

--- START FILE: portofolio/backend-portofolio/go.mod ---
module backend-portofolio

go 1.23.0

require (
	github.com/gin-gonic/gin v1.11.0
	github.com/golang-jwt/jwt/v5 v5.3.0
	gorm.io/driver/postgres v1.6.0
	gorm.io/gorm v1.31.0
)

require (
	github.com/bytedance/sonic v1.14.0 // indirect
	github.com/bytedance/sonic/loader v0.3.0 // indirect
	github.com/cloudwego/base64x v0.1.6 // indirect
	github.com/gabriel-vasile/mimetype v1.4.8 // indirect
	github.com/gin-contrib/sse v1.1.0 // indirect
	github.com/go-playground/locales v0.14.1 // indirect
	github.com/go-playground/universal-translator v0.18.1 // indirect
	github.com/go-playground/validator/v10 v10.27.0 // indirect
	github.com/goccy/go-json v0.10.2 // indirect
	github.com/goccy/go-yaml v1.18.0 // indirect
	github.com/jackc/pgpassfile v1.0.0 // indirect
	github.com/jackc/pgservicefile v0.0.0-20240606120523-5a60cdf6a761 // indirect
	github.com/jackc/pgx/v5 v5.6.0 // indirect
	github.com/jackc/puddle/v2 v2.2.2 // indirect
	github.com/jinzhu/inflection v1.0.0 // indirect
	github.com/jinzhu/now v1.1.5 // indirect
	github.com/json-iterator/go v1.1.12 // indirect
	github.com/klauspost/cpuid/v2 v2.3.0 // indirect
	github.com/leodido/go-urn v1.4.0 // indirect
	github.com/mattn/go-isatty v0.0.20 // indirect
	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
	github.com/modern-go/reflect2 v1.0.2 // indirect
	github.com/pelletier/go-toml/v2 v2.2.4 // indirect
	github.com/quic-go/qpack v0.5.1 // indirect
	github.com/quic-go/quic-go v0.54.0 // indirect
	github.com/twitchyliquid64/golang-asm v0.15.1 // indirect
	github.com/ugorji/go/codec v1.3.0 // indirect
	go.uber.org/mock v0.5.0 // indirect
	golang.org/x/arch v0.20.0 // indirect
	golang.org/x/crypto v0.40.0 // indirect
	golang.org/x/mod v0.25.0 // indirect
	golang.org/x/net v0.42.0 // indirect
	golang.org/x/sync v0.16.0 // indirect
	golang.org/x/sys v0.35.0 // indirect
	golang.org/x/text v0.27.0 // indirect
	golang.org/x/tools v0.34.0 // indirect
	google.golang.org/protobuf v1.36.9 // indirect
)

--- END FILE: portofolio/backend-portofolio/go.mod ---

--- START FILE: portofolio/backend-portofolio/go.sum ---
github.com/bytedance/sonic v1.14.0 h1:/OfKt8HFw0kh2rj8N0F6C/qPGRESq0BbaNZgcNXXzQQ=
github.com/bytedance/sonic v1.14.0/go.mod h1:WoEbx8WTcFJfzCe0hbmyTGrfjt8PzNEBdxlNUO24NhA=
github.com/bytedance/sonic/loader v0.3.0 h1:dskwH8edlzNMctoruo8FPTJDF3vLtDT0sXZwvZJyqeA=
github.com/bytedance/sonic/loader v0.3.0/go.mod h1:N8A3vUdtUebEY2/VQC0MyhYeKUFosQU6FxH2JmUe6VI=
github.com/cloudwego/base64x v0.1.6 h1:t11wG9AECkCDk5fMSoxmufanudBtJ+/HemLstXDLI2M=
github.com/cloudwego/base64x v0.1.6/go.mod h1:OFcloc187FXDaYHvrNIjxSe8ncn0OOM8gEHfghB2IPU=
github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/gabriel-vasile/mimetype v1.4.8 h1:FfZ3gj38NjllZIeJAmMhr+qKL8Wu+nOoI3GqacKw1NM=
github.com/gabriel-vasile/mimetype v1.4.8/go.mod h1:ByKUIKGjh1ODkGM1asKUbQZOLGrPjydw3hYPU2YU9t8=
github.com/gin-contrib/sse v1.1.0 h1:n0w2GMuUpWDVp7qSpvze6fAu9iRxJY4Hmj6AmBOU05w=
github.com/gin-contrib/sse v1.1.0/go.mod h1:hxRZ5gVpWMT7Z0B0gSNYqqsSCNIJMjzvm6fqCz9vjwM=
github.com/gin-gonic/gin v1.11.0 h1:OW/6PLjyusp2PPXtyxKHU0RbX6I/l28FTdDlae5ueWk=
github.com/gin-gonic/gin v1.11.0/go.mod h1:+iq/FyxlGzII0KHiBGjuNn4UNENUlKbGlNmc+W50Dls=
github.com/go-playground/assert/v2 v2.2.0 h1:JvknZsQTYeFEAhQwI4qEt9cyV5ONwRHC+lYKSsYSR8s=
github.com/go-playground/assert/v2 v2.2.0/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=
github.com/go-playground/locales v0.14.1 h1:EWaQ/wswjilfKLTECiXz7Rh+3BjFhfDFKv/oXslEjJA=
github.com/go-playground/locales v0.14.1/go.mod h1:hxrqLVvrK65+Rwrd5Fc6F2O76J/NuW9t0sjnWqG1slY=
github.com/go-playground/universal-translator v0.18.1 h1:Bcnm0ZwsGyWbCzImXv+pAJnYK9S473LQFuzCbDbfSFY=
github.com/go-playground/universal-translator v0.18.1/go.mod h1:xekY+UJKNuX9WP91TpwSH2VMlDf28Uj24BCp08ZFTUY=
github.com/go-playground/validator/v10 v10.27.0 h1:w8+XrWVMhGkxOaaowyKH35gFydVHOvC0/uWoy2Fzwn4=
github.com/go-playground/validator/v10 v10.27.0/go.mod h1:I5QpIEbmr8On7W0TktmJAumgzX4CA1XNl4ZmDuVHKKo=
github.com/goccy/go-json v0.10.2 h1:CrxCmQqYDkv1z7lO7Wbh2HN93uovUHgrECaO5ZrCXAU=
github.com/goccy/go-json v0.10.2/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=
github.com/goccy/go-yaml v1.18.0 h1:8W7wMFS12Pcas7KU+VVkaiCng+kG8QiFeFwzFb+rwuw=
github.com/goccy/go-yaml v1.18.0/go.mod h1:XBurs7gK8ATbW4ZPGKgcbrY1Br56PdM69F7LkFRi1kA=
github.com/golang-jwt/jwt/v5 v5.3.0 h1:pv4AsKCKKZuqlgs5sUmn4x8UlGa0kEVt/puTpKx9vvo=
github.com/golang-jwt/jwt/v5 v5.3.0/go.mod h1:fxCRLWMO43lRc8nhHWY6LGqRcf+1gQWArsqaEUEa5bE=
github.com/google/go-cmp v0.7.0 h1:wk8382ETsv4JYUZwIsn6YpYiWiBsYLSJiTsyBybVuN8=
github.com/google/go-cmp v0.7.0/go.mod h1:pXiqmnSA92OHEEa9HXL2W4E7lf9JzCmGVUdgjX3N/iU=
github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
github.com/jackc/pgpassfile v1.0.0 h1:/6Hmqy13Ss2zCq62VdNG8tM1wchn8zjSGOBJ6icpsIM=
github.com/jackc/pgpassfile v1.0.0/go.mod h1:CEx0iS5ambNFdcRtxPj5JhEz+xB6uRky5eyVu/W2HEg=
github.com/jackc/pgservicefile v0.0.0-20240606120523-5a60cdf6a761 h1:iCEnooe7UlwOQYpKFhBabPMi4aNAfoODPEFNiAnClxo=
github.com/jackc/pgservicefile v0.0.0-20240606120523-5a60cdf6a761/go.mod h1:5TJZWKEWniPve33vlWYSoGYefn3gLQRzjfDlhSJ9ZKM=
github.com/jackc/pgx/v5 v5.6.0 h1:SWJzexBzPL5jb0GEsrPMLIsi/3jOo7RHlzTjcAeDrPY=
github.com/jackc/pgx/v5 v5.6.0/go.mod h1:DNZ/vlrUnhWCoFGxHAG8U2ljioxukquj7utPDgtQdTw=
github.com/jackc/puddle/v2 v2.2.2 h1:PR8nw+E/1w0GLuRFSmiioY6UooMp6KJv0/61nB7icHo=
github.com/jackc/puddle/v2 v2.2.2/go.mod h1:vriiEXHvEE654aYKXXjOvZM39qJ0q+azkZFrfEOc3H4=
github.com/jinzhu/inflection v1.0.0 h1:K317FqzuhWc8YvSVlFMCCUb36O/S9MCKRDI7QkRKD/E=
github.com/jinzhu/inflection v1.0.0/go.mod h1:h+uFLlag+Qp1Va5pdKtLDYj+kHp5pxUVkryuEj+Srlc=
github.com/jinzhu/now v1.1.5 h1:/o9tlHleP7gOFmsnYNz3RGnqzefHA47wQpKrrdTIwXQ=
github.com/jinzhu/now v1.1.5/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=
github.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=
github.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=
github.com/klauspost/cpuid/v2 v2.3.0 h1:S4CRMLnYUhGeDFDqkGriYKdfoFlDnMtqTiI/sFzhA9Y=
github.com/klauspost/cpuid/v2 v2.3.0/go.mod h1:hqwkgyIinND0mEev00jJYCxPNVRVXFQeu1XKlok6oO0=
github.com/leodido/go-urn v1.4.0 h1:WT9HwE9SGECu3lg4d/dIA+jxlljEa1/ffXKmRjqdmIQ=
github.com/leodido/go-urn v1.4.0/go.mod h1:bvxc+MVxLKB4z00jd1z+Dvzr47oO32F/QSNjSBOlFxI=
github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=
github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
github.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=
github.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=
github.com/pelletier/go-toml/v2 v2.2.4 h1:mye9XuhQ6gvn5h28+VilKrrPoQVanw5PMw/TB0t5Ec4=
github.com/pelletier/go-toml/v2 v2.2.4/go.mod h1:2gIqNv+qfxSVS7cM2xJQKtLSTLUE9V8t9Stt+h56mCY=
github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/quic-go/qpack v0.5.1 h1:giqksBPnT/HDtZ6VhtFKgoLOWmlyo9Ei6u9PqzIMbhI=
github.com/quic-go/qpack v0.5.1/go.mod h1:+PC4XFrEskIVkcLzpEkbLqq1uCoxPhQuvK5rH1ZgaEg=
github.com/quic-go/quic-go v0.54.0 h1:6s1YB9QotYI6Ospeiguknbp2Znb/jZYjZLRXn9kMQBg=
github.com/quic-go/quic-go v0.54.0/go.mod h1:e68ZEaCdyviluZmy44P6Iey98v/Wfz6HCjQEm+l8zTY=
github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=
github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
github.com/stretchr/testify v1.11.1 h1:7s2iGBzp5EwR7/aIZr8ao5+dra3wiQyKjjFuvgVKu7U=
github.com/stretchr/testify v1.11.1/go.mod h1:wZwfW3scLgRK+23gO65QZefKpKQRnfz6sD981Nm4B6U=
github.com/twitchyliquid64/golang-asm v0.15.1 h1:SU5vSMR7hnwNxj24w34ZyCi/FmDZTkS4MhqMhdFk5YI=
github.com/twitchyliquid64/golang-asm v0.15.1/go.mod h1:a1lVb/DtPvCB8fslRZhAngC2+aY1QWCk3Cedj/Gdt08=
github.com/ugorji/go/codec v1.3.0 h1:Qd2W2sQawAfG8XSvzwhBeoGq71zXOC/Q1E9y/wUcsUA=
github.com/ugorji/go/codec v1.3.0/go.mod h1:pRBVtBSKl77K30Bv8R2P+cLSGaTtex6fsA2Wjqmfxj4=
go.uber.org/mock v0.5.0 h1:KAMbZvZPyBPWgD14IrIQ38QCyjwpvVVV6K/bHl1IwQU=
go.uber.org/mock v0.5.0/go.mod h1:ge71pBPLYDk7QIi1LupWxdAykm7KIEFchiOqd6z7qMM=
golang.org/x/arch v0.20.0 h1:dx1zTU0MAE98U+TQ8BLl7XsJbgze2WnNKF/8tGp/Q6c=
golang.org/x/arch v0.20.0/go.mod h1:bdwinDaKcfZUGpH09BB7ZmOfhalA8lQdzl62l8gGWsk=
golang.org/x/crypto v0.40.0 h1:r4x+VvoG5Fm+eJcxMaY8CQM7Lb0l1lsmjGBQ6s8BfKM=
golang.org/x/crypto v0.40.0/go.mod h1:Qr1vMER5WyS2dfPHAlsOj01wgLbsyWtFn/aY+5+ZdxY=
golang.org/x/mod v0.25.0 h1:n7a+ZbQKQA/Ysbyb0/6IbB1H/X41mKgbhfv7AfG/44w=
golang.org/x/mod v0.25.0/go.mod h1:IXM97Txy2VM4PJ3gI61r1YEk/gAj6zAHN3AdZt6S9Ww=
golang.org/x/net v0.42.0 h1:jzkYrhi3YQWD6MLBJcsklgQsoAcw89EcZbJw8Z614hs=
golang.org/x/net v0.42.0/go.mod h1:FF1RA5d3u7nAYA4z2TkclSCKh68eSXtiFwcWQpPXdt8=
golang.org/x/sync v0.16.0 h1:ycBJEhp9p4vXvUZNszeOq0kGTPghopOL8q0fq3vstxw=
golang.org/x/sync v0.16.0/go.mod h1:1dzgHSNfp02xaA81J2MS99Qcpr2w7fw1gpm99rleRqA=
golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.35.0 h1:vz1N37gP5bs89s7He8XuIYXpyY0+QlsKmzipCbUtyxI=
golang.org/x/sys v0.35.0/go.mod h1:BJP2sWEmIv4KK5OTEluFJCKSidICx8ciO85XgH3Ak8k=
golang.org/x/text v0.27.0 h1:4fGWRpyh641NLlecmyl4LOe6yDdfaYNrGb2zdfo4JV4=
golang.org/x/text v0.27.0/go.mod h1:1D28KMCvyooCX9hBiosv5Tz/+YLxj0j7XhWjpSUF7CU=
golang.org/x/tools v0.34.0 h1:qIpSLOxeCYGg9TrcJokLBG4KFA6d795g0xkBkiESGlo=
golang.org/x/tools v0.34.0/go.mod h1:pAP9OwEaY1CAW3HOmg3hLZC5Z0CCmzjAF2UQMSqNARg=
google.golang.org/protobuf v1.36.9 h1:w2gp2mA27hUeUzj9Ex9FBjsBm40zfaDtEWow293U7Iw=
google.golang.org/protobuf v1.36.9/go.mod h1:fuxRtAxBytpl4zzqUh6/eyUujkJdNiuEkXntxiD/uRU=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
gorm.io/driver/postgres v1.6.0 h1:2dxzU8xJ+ivvqTRph34QX+WrRaJlmfyPqXmoGVjMBa4=
gorm.io/driver/postgres v1.6.0/go.mod h1:vUw0mrGgrTK+uPHEhAdV4sfFELrByKVGnaVRkXDhtWo=
gorm.io/gorm v1.31.0 h1:0VlycGreVhK7RF/Bwt51Fk8v0xLiiiFdbGDPIZQ7mJY=
gorm.io/gorm v1.31.0/go.mod h1:XyQVbO2k6YkOis7C2437jSit3SsDK72s7n7rsSHd+Gs=

--- END FILE: portofolio/backend-portofolio/go.sum ---

--- START FILE: portofolio/backend-portofolio/internal/config/config.go ---
//internal/config/config.go
package config

import "os"

type Config struct {
	AppPort       string
	DBHost        string
	DBPort        string
	DBUser        string
	DBPassword    string
	DBName        string
	JWTSecret     string
	AdminEmail    string
	AdminPassword string
	CORSOrigins   string
	UploadDir     string
}

func getenv(k, def string) string {
	if v := os.Getenv(k); v != "" {
		return v
	}
	return def
}

func Load() Config {
	return Config{
		AppPort:       getenv("APP_PORT", "8080"),
		DBHost:        getenv("DB_HOST", "db"),
		DBPort:        getenv("DB_PORT", "5432"),
		DBUser:        getenv("DB_USER", "postgres"),
		DBPassword:    getenv("DB_PASSWORD", "postgres"),
		DBName:        getenv("DB_NAME", "portfolio"),
		JWTSecret:     getenv("JWT_SECRET", "devsecret"),
		AdminEmail:    getenv("ADMIN_EMAIL", ""),
		AdminPassword: getenv("ADMIN_PASSWORD", ""),
		CORSOrigins:   getenv("CORS_ORIGINS", "http://localhost:5173"),
		UploadDir:     getenv("UPLOAD_DIR", "/app/storage/uploads"),
	}
}

--- END FILE: portofolio/backend-portofolio/internal/config/config.go ---

--- START FILE: portofolio/backend-portofolio/internal/db/db.go ---
// internal/db/db.go
package db

import (
	"fmt"
	"log"

	"backend-portofolio/internal/config"
	"backend-portofolio/internal/models"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

var Conn *gorm.DB

func Init(cfg config.Config) {
	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=disable",
		cfg.DBHost, cfg.DBUser, cfg.DBPassword, cfg.DBName, cfg.DBPort)

	var err error
	Conn, err = gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatalf("DB connect error: %v\n", err)
	}
	if err := Conn.AutoMigrate(
		&models.Project{},
		&models.Profile{},
		&models.SocialLink{},
		&models.Skill{},
		&models.Experience{},
		&models.Achievement{},
	); err != nil {
		log.Fatalf("DB migrate error: %v\n", err)
	}
}

--- END FILE: portofolio/backend-portofolio/internal/db/db.go ---

--- START FILE: portofolio/backend-portofolio/internal/handlers/achievement_handler.go ---
// internal/handlers/achievement_handler.go
package handlers

import (
	"backend-portofolio/internal/db"
	"backend-portofolio/internal/models"
	"github.com/gin-gonic/gin"
	"net/http"
)

// PUBLIC
func ListPublicAchievements() gin.HandlerFunc {
	return func(c *gin.Context) {
		var items []models.Achievement
		db.Conn.Order("sort_order asc, date desc").Find(&items)
		c.JSON(http.StatusOK, items)
	}
}

// ADMIN
func AdminListAchievements() gin.HandlerFunc {
	return func(c *gin.Context) {
		var items []models.Achievement
		db.Conn.Order("sort_order asc, date desc").Find(&items)
		c.JSON(http.StatusOK, items)
	}
}

func CreateAchievement() gin.HandlerFunc {
	return func(c *gin.Context) {
		var item models.Achievement
		if err := c.ShouldBindJSON(&item); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid payload"})
			return
		}
		if err := db.Conn.Create(&item).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "create error"})
			return
		}
		c.JSON(http.StatusCreated, item)
	}
}

func UpdateAchievement() gin.HandlerFunc {
	return func(c *gin.Context) {
		id := c.Param("id")
		var item models.Achievement
		if err := db.Conn.First(&item, id).Error; err != nil {
			c.JSON(http.StatusNotFound, gin.H{"error": "not found"})
			return
		}
		if err := c.ShouldBindJSON(&item); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid payload"})
			return
		}
		if err := db.Conn.Save(&item).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "update error"})
			return
		}
		c.JSON(http.StatusOK, item)
	}
}

func DeleteAchievement() gin.HandlerFunc {
	return func(c *gin.Context) {
		id := c.Param("id")
		if err := db.Conn.Delete(&models.Achievement{}, id).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "delete error"})
			return
		}
		c.JSON(http.StatusOK, gin.H{"ok": true})
	}
}

--- END FILE: portofolio/backend-portofolio/internal/handlers/achievement_handler.go ---

--- START FILE: portofolio/backend-portofolio/internal/handlers/auth_handler.go ---
// internal/handlers/auth_handler.go
package handlers

import (
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/golang-jwt/jwt/v5"
)

type LoginReq struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func LoginHandler(secret, adminEmail, adminPass string) gin.HandlerFunc {
	return func(c *gin.Context) {
		var req LoginReq
		if err := c.ShouldBindJSON(&req); err != nil || req.Email == "" || req.Password == "" {
			c.JSON(http.StatusBadRequest, gin.H{"error": "email & password required"})
			return
		}
		if req.Email != adminEmail || req.Password != adminPass {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "invalid credentials"})
			return
		}
		claims := jwt.MapClaims{
			"sub":   req.Email,
			"scope": "admin",
			"exp":   time.Now().Add(24 * time.Hour).Unix(),
		}
		token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
		tstr, _ := token.SignedString([]byte(secret))
		c.JSON(http.StatusOK, gin.H{"access_token": tstr})
	}
}

--- END FILE: portofolio/backend-portofolio/internal/handlers/auth_handler.go ---

--- START FILE: portofolio/backend-portofolio/internal/handlers/experience_handler.go ---
// internal/handlers/experience_handler.go
package handlers

import (
	"backend-portofolio/internal/db"
	"backend-portofolio/internal/models"
	"github.com/gin-gonic/gin"
	"net/http"
)

// PUBLIC
func ListPublicExperiences() gin.HandlerFunc {
	return func(c *gin.Context) {
		var items []models.Experience
		db.Conn.Order("sort_order asc, start_date desc").Find(&items)
		c.JSON(http.StatusOK, items)
	}
}

// ADMIN
func AdminListExperiences() gin.HandlerFunc {
	return func(c *gin.Context) {
		var items []models.Experience
		db.Conn.Order("sort_order asc, start_date desc").Find(&items)
		c.JSON(http.StatusOK, items)
	}
}

func CreateExperience() gin.HandlerFunc {
	return func(c *gin.Context) {
		var item models.Experience
		if err := c.ShouldBindJSON(&item); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid payload"})
			return
		}
		if err := db.Conn.Create(&item).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "create error"})
			return
		}
		c.JSON(http.StatusCreated, item)
	}
}

func UpdateExperience() gin.HandlerFunc {
	return func(c *gin.Context) {
		id := c.Param("id")
		var item models.Experience
		if err := db.Conn.First(&item, id).Error; err != nil {
			c.JSON(http.StatusNotFound, gin.H{"error": "not found"})
			return
		}
		if err := c.ShouldBindJSON(&item); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid payload"})
			return
		}
		if err := db.Conn.Save(&item).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "update error"})
			return
		}
		c.JSON(http.StatusOK, item)
	}
}

func DeleteExperience() gin.HandlerFunc {
	return func(c *gin.Context) {
		id := c.Param("id")
		if err := db.Conn.Delete(&models.Experience{}, id).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "delete error"})
			return
		}
		c.JSON(http.StatusOK, gin.H{"ok": true})
	}
}

--- END FILE: portofolio/backend-portofolio/internal/handlers/experience_handler.go ---

--- START FILE: portofolio/backend-portofolio/internal/handlers/profile_handler.go ---
// internal/handlers/profile_handler.go
package handlers

import (
	"net/http"

	"backend-portofolio/internal/db"
	"backend-portofolio/internal/models"
	"github.com/gin-gonic/gin"
)

type upsertProfileReq struct {
	FullName        string              `json:"full_name"`
	Headline        string              `json:"headline"`
	Bio             string              `json:"bio"`
	PhotoURL        string              `json:"photo_url"`
	Location        string              `json:"location"`
	ResumeURL       string              `json:"resume_url"`
	SkillGroupOrder string              `json:"skill_group_order"`
	Socials         []models.SocialLink `json:"socials"`
}

// PUBLIC
func GetProfilePublic() gin.HandlerFunc {
	return func(c *gin.Context) {
		var p models.Profile
		if err := db.Conn.Preload("Socials", "active = ?", true).First(&p).Error; err != nil {
			c.JSON(http.StatusOK, gin.H{"profile": nil})
			return
		}
		c.JSON(http.StatusOK, p)
	}
}

// ADMIN (singleton upsert)
func UpsertProfile() gin.HandlerFunc {
	return func(c *gin.Context) {
		var req upsertProfileReq
		if err := c.ShouldBindJSON(&req); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid payload"})
			return
		}

		var p models.Profile
		db.Conn.First(&p)

		p.FullName = req.FullName
		p.Headline = req.Headline
		p.Bio = req.Bio
		p.PhotoURL = req.PhotoURL
		p.Location = req.Location
		p.ResumeURL = req.ResumeURL
		p.SkillGroupOrder = req.SkillGroupOrder

		if p.ID == 0 {
			if err := db.Conn.Create(&p).Error; err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "create error"})
				return
			}
		} else {
			if err := db.Conn.Save(&p).Error; err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "save error"})
				return
			}
		}

		db.Conn.Where("profile_id = ?", p.ID).Delete(&models.SocialLink{})
		for _, s := range req.Socials {
			s.ProfileID = p.ID
			db.Conn.Create(&s)
		}

		db.Conn.Preload("Socials").First(&p, p.ID)
		c.JSON(http.StatusOK, p)
	}
}

--- END FILE: portofolio/backend-portofolio/internal/handlers/profile_handler.go ---

--- START FILE: portofolio/backend-portofolio/internal/handlers/project_handler.go ---
// internal/handlers/project_handler.go
package handlers

import (
	"database/sql"
	"encoding/json"
	"net/http"
	"regexp"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
	"gorm.io/gorm"

	"backend-portofolio/internal/db"
	"backend-portofolio/internal/models"
)

// ---- utils ----
func fromGalleryJSON(s string) []string {
	if s == "" {
		return []string{}
	}
	var out []string
	_ = json.Unmarshal([]byte(s), &out)
	return out
}
func toGalleryJSON(arr []string) string { b, _ := json.Marshal(arr); return string(b) }

// normalisasi slug ke kebab-case
var nonAlnum = regexp.MustCompile(`[^a-z0-9]+`)

func normSlug(s string) string {
	s = strings.ToLower(strings.TrimSpace(s))
	s = nonAlnum.ReplaceAllString(s, "-")
	s = strings.Trim(s, "-")
	if len(s) > 120 {
		s = s[:120]
	}
	return s
}

// ====== PUBLIC ======
func ListPublicProjects() gin.HandlerFunc {
	return func(c *gin.Context) {
		var items []models.Project
		if err := db.Conn.
			Where("status = ?", "published").
			Order("CASE WHEN sort_order IS NULL THEN 1 ELSE 0 END, sort_order ASC, created_at DESC").
			Find(&items).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "query error"})
			return
		}
		resp := make([]gin.H, 0, len(items))
		for _, p := range items {
			resp = append(resp, gin.H{
				"id":          p.ID,
				"slug":        p.Slug,
				"title":       p.Title,
				"summary":     p.Summary,
				"cover_url":   p.CoverURL,
				"repo_url":    p.RepoURL,
				"demo_url":    p.DemoURL,
				"role":        p.Role,
				"status":      p.Status,
				"is_featured": p.IsFeatured,
				"gallery":     fromGalleryJSON(p.GalleryJSON),
				"sort_order":  p.SortOrder,
				"created_at":  p.CreatedAt,
				"updated_at":  p.UpdatedAt,
				"tech_stack":  p.TechStack,
			})
		}
		c.JSON(http.StatusOK, resp)
	}
}

func GetProjectBySlug() gin.HandlerFunc {
	return func(c *gin.Context) {
		slug := normSlug(c.Param("slug"))
		var p models.Project
		if err := db.Conn.Where("slug = ? AND status = ?", slug, "published").First(&p).Error; err != nil {
			if err == gorm.ErrRecordNotFound {
				c.JSON(http.StatusNotFound, gin.H{"error": "not found"})
				return
			}
			c.JSON(http.StatusInternalServerError, gin.H{"error": "query error"})
			return
		}
		c.JSON(http.StatusOK, gin.H{
			"id":          p.ID,
			"slug":        p.Slug,
			"title":       p.Title,
			"summary":     p.Summary,
			"body":        p.Body,
			"cover_url":   p.CoverURL,
			"repo_url":    p.RepoURL,
			"demo_url":    p.DemoURL,
			"role":        p.Role,
			"status":      p.Status,
			"is_featured": p.IsFeatured,
			"gallery":     fromGalleryJSON(p.GalleryJSON),
			"sort_order":  p.SortOrder,
			"created_at":  p.CreatedAt,
			"updated_at":  p.UpdatedAt,
			"tech_stack":  p.TechStack,
		})
	}
}

// ====== ADMIN ======
func AdminListProjects() gin.HandlerFunc {
	return func(c *gin.Context) {
		var items []models.Project
		if err := db.Conn.
			Order("CASE WHEN sort_order IS NULL THEN 1 ELSE 0 END, sort_order ASC, created_at DESC").
			Find(&items).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "query error"})
			return
		}
		resp := make([]gin.H, 0, len(items))
		for _, p := range items {
			resp = append(resp, gin.H{
				"id":          p.ID,
				"slug":        p.Slug,
				"title":       p.Title,
				"summary":     p.Summary,
				"body":        p.Body,
				"cover_url":   p.CoverURL,
				"repo_url":    p.RepoURL,
				"demo_url":    p.DemoURL,
				"role":        p.Role,
				"status":      p.Status,
				"is_featured": p.IsFeatured,
				"gallery":     fromGalleryJSON(p.GalleryJSON),
				"sort_order":  p.SortOrder,
				"created_at":  p.CreatedAt,
				"updated_at":  p.UpdatedAt,
				"tech_stack":  p.TechStack,
			})
		}
		c.JSON(http.StatusOK, resp)
	}
}

type createProjectReq struct {
	Slug       string   `json:"slug" binding:"required"`
	Title      string   `json:"title" binding:"required"`
	Summary    string   `json:"summary" binding:"required"`
	Body       string   `json:"body"`
	CoverURL   string   `json:"cover_url"`
	RepoURL    string   `json:"repo_url"`
	DemoURL    string   `json:"demo_url"`
	Role       string   `json:"role"`
	Status     string   `json:"status"`
	IsFeatured bool     `json:"is_featured"`
	Gallery    []string `json:"gallery"`
	TechStack  string   `json:"tech_stack"`
}

func CreateProject() gin.HandlerFunc {
	return func(c *gin.Context) {
		var req createProjectReq
		if err := c.ShouldBindJSON(&req); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid body"})
			return
		}

		var max sql.NullInt64
		row := db.Conn.Model(&models.Project{}).Select("MAX(sort_order)").Row()
		_ = row.Scan(&max)
		next := 0
		if max.Valid {
			next = int(max.Int64) + 1
		}

		now := time.Now()
		p := models.Project{
			Slug:        strings.TrimSpace(req.Slug),
			Title:       strings.TrimSpace(req.Title),
			Summary:     strings.TrimSpace(req.Summary),
			Body:        req.Body,
			CoverURL:    strings.TrimSpace(req.CoverURL),
			RepoURL:     strings.TrimSpace(req.RepoURL),
			DemoURL:     strings.TrimSpace(req.DemoURL),
			Role:        strings.TrimSpace(req.Role),
			Status:      strings.TrimSpace(req.Status),
			IsFeatured:  req.IsFeatured,
			GalleryJSON: toGalleryJSON(req.Gallery),
			SortOrder:   &next,
			CreatedAt:   now,
			UpdatedAt:   now,
			TechStack:   req.TechStack,
		}
		if p.Status == "" {
			p.Status = "published"
		}

		if err := db.Conn.Create(&p).Error; err != nil {
			low := strings.ToLower(err.Error())
			if strings.Contains(low, "duplicate") || strings.Contains(low, "unique") {
				c.JSON(http.StatusConflict, gin.H{"error": "slug already exists"})
				return
			}
			c.JSON(http.StatusInternalServerError, gin.H{"error": "insert error"})
			return
		}

		c.JSON(http.StatusCreated, gin.H{
			"id":          p.ID,
			"slug":        p.Slug,
			"title":       p.Title,
			"summary":     p.Summary,
			"body":        p.Body,
			"cover_url":   p.CoverURL,
			"repo_url":    p.RepoURL,
			"demo_url":    p.DemoURL,
			"role":        p.Role,
			"status":      p.Status,
			"is_featured": p.IsFeatured,
			"gallery":     fromGalleryJSON(p.GalleryJSON),
			"sort_order":  p.SortOrder,
			"created_at":  p.CreatedAt,
			"updated_at":  p.UpdatedAt,
			"tech_stack":  p.TechStack,
		})
	}
}

type updateProjectReq struct {
	Slug       *string   `json:"slug"`
	Title      *string   `json:"title"`
	Summary    *string   `json:"summary"`
	Body       *string   `json:"body"`
	CoverURL   *string   `json:"cover_url"`
	RepoURL    *string   `json:"repo_url"`
	DemoURL    *string   `json:"demo_url"`
	Role       *string   `json:"role"`
	Status     *string   `json:"status"`
	IsFeatured *bool     `json:"is_featured"`
	Gallery    *[]string `json:"gallery"`
	SortOrder  *int      `json:"sort_order"`
	TechStack  *string   `json:"tech_stack"`
}

func UpdateProject() gin.HandlerFunc {
	return func(c *gin.Context) {
		id := c.Param("id")
		var p models.Project
		if err := db.Conn.First(&p, id).Error; err != nil {
			if err == gorm.ErrRecordNotFound {
				c.JSON(http.StatusNotFound, gin.H{"error": "not found"})
				return
			}
			c.JSON(http.StatusInternalServerError, gin.H{"error": "query error"})
			return
		}
		var req updateProjectReq
		if err := c.ShouldBindJSON(&req); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid body"})
			return
		}

		if req.Slug != nil {
			ns := normSlug(*req.Slug)
			if ns == "" {
				c.JSON(http.StatusBadRequest, gin.H{"error": "invalid slug"})
				return
			}
			p.Slug = ns
		}
		if req.Title != nil {
			p.Title = strings.TrimSpace(*req.Title)
		}
		if req.Summary != nil {
			p.Summary = strings.TrimSpace(*req.Summary)
		}
		if req.Body != nil {
			p.Body = *req.Body
		}
		if req.CoverURL != nil {
			p.CoverURL = strings.TrimSpace(*req.CoverURL)
		}
		if req.RepoURL != nil {
			p.RepoURL = strings.TrimSpace(*req.RepoURL)
		}
		if req.DemoURL != nil {
			p.DemoURL = strings.TrimSpace(*req.DemoURL)
		}
		if req.Role != nil {
			p.Role = strings.TrimSpace(*req.Role)
		}
		if req.Status != nil {
			p.Status = strings.TrimSpace(*req.Status)
		}
		if req.IsFeatured != nil {
			p.IsFeatured = *req.IsFeatured
		}
		if req.Gallery != nil {
			p.GalleryJSON = toGalleryJSON(*req.Gallery)
		}
		if req.SortOrder != nil {
			p.SortOrder = req.SortOrder
		}
		if req.TechStack != nil {
			p.TechStack = *req.TechStack
		}

		p.UpdatedAt = time.Now()
		if err := db.Conn.Save(&p).Error; err != nil {
			low := strings.ToLower(err.Error())
			if strings.Contains(low, "duplicate") || strings.Contains(low, "unique") {
				c.JSON(http.StatusConflict, gin.H{"error": "slug already exists"})
				return
			}
			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
			return
		}
		c.JSON(http.StatusOK, gin.H{"ok": true})
	}
}

type reorderItem struct {
	ID        uint `json:"id"`
	SortOrder int  `json:"sort_order"`
}
type reorderReq struct {
	Orders []reorderItem `json:"orders"`
}

func DeleteProject() gin.HandlerFunc {
	return func(c *gin.Context) {
		id := c.Param("id")
		if err := db.Conn.Delete(&models.Project{}, id).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "delete error"})
			return
		}
		c.JSON(http.StatusOK, gin.H{"ok": true})
	}
}

func ReorderProjects() gin.HandlerFunc {
	return func(c *gin.Context) {
		var req reorderReq
		if err := c.ShouldBindJSON(&req); err != nil || len(req.Orders) == 0 {
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid body"})
			return
		}

		tx := db.Conn.Begin()
		now := time.Now()
		for _, o := range req.Orders {
			v := o.SortOrder
			if err := tx.Model(&models.Project{}).
				Where("id = ?", o.ID).
				Updates(map[string]any{"sort_order": &v, "updated_at": now}).Error; err != nil {
				tx.Rollback()
				c.JSON(http.StatusInternalServerError, gin.H{"error": "update error"})
				return
			}
		}
		if err := tx.Commit().Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "commit error"})
			return
		}
		c.JSON(http.StatusOK, gin.H{"ok": true})
	}
}

--- END FILE: portofolio/backend-portofolio/internal/handlers/project_handler.go ---

--- START FILE: portofolio/backend-portofolio/internal/handlers/skill_handler.go ---
// internal/handlers/skill_handler.go
package handlers

import (
	"net/http"
	"time" // Pastikan 'time' diimpor

	"backend-portofolio/internal/db"
	"backend-portofolio/internal/models"
	"github.com/gin-gonic/gin"
)

// PUBLIC
func GetSkillsPublic() gin.HandlerFunc {
	return func(c *gin.Context) {
		var items []models.Skill
		if err := db.Conn.Order(`sort_order asc, "group" asc, name asc`).Find(&items).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "query error"})
			return
		}
		c.JSON(http.StatusOK, items)
	}
}

// ADMIN
func AdminListSkills() gin.HandlerFunc {
	return func(c *gin.Context) {
		var items []models.Skill
		if err := db.Conn.Order("sort_order asc").Find(&items).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "query error"})
			return
		}
		c.JSON(http.StatusOK, items)
	}
}

type reorderSkillItem struct {
	ID        uint `json:"id"`
	SortOrder int  `json:"sort_order"`
}
type reorderSkillReq struct {
	Orders []reorderSkillItem `json:"orders"`
}

// HANDLER BARU UNTUK REORDER
func ReorderSkills() gin.HandlerFunc {
	return func(c *gin.Context) {
		var req reorderSkillReq
		if err := c.ShouldBindJSON(&req); err != nil || len(req.Orders) == 0 {
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid body"})
			return
		}

		tx := db.Conn.Begin()
		for _, o := range req.Orders {
			if err := tx.Model(&models.Skill{}).
				Where("id = ?", o.ID).
				Updates(map[string]interface{}{"sort_order": o.SortOrder, "updated_at": time.Now()}).Error; err != nil {
				tx.Rollback()
				c.JSON(http.StatusInternalServerError, gin.H{"error": "update error: " + err.Error()})
				return
			}
		}
		if err := tx.Commit().Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "commit error"})
			return
		}
		c.JSON(http.StatusOK, gin.H{"ok": true})
	}
}

// Create, Update, Delete tetap sama
func CreateSkill() gin.HandlerFunc {
	return func(c *gin.Context) {
		var s models.Skill
		if err := c.ShouldBindJSON(&s); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid payload"})
			return
		}
		if err := db.Conn.Create(&s).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "create error"})
			return
		}
		c.JSON(http.StatusCreated, s)
	}
}

func UpdateSkill() gin.HandlerFunc {
	return func(c *gin.Context) {
		var s models.Skill
		id := c.Param("id")
		if err := db.Conn.First(&s, id).Error; err != nil {
			c.JSON(http.StatusNotFound, gin.H{"error": "not found"})
			return
		}
		var in models.Skill
		if err := c.ShouldBindJSON(&in); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid payload"})
			return
		}
		s.Group = in.Group
		s.Name = in.Name
		if err := db.Conn.Save(&s).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "update error"})
			return
		}
		c.JSON(http.StatusOK, s)
	}
}

func DeleteSkill() gin.HandlerFunc {
	return func(c *gin.Context) {
		id := c.Param("id")
		if err := db.Conn.Delete(&models.Skill{}, id).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "delete error"})
			return
		}
		c.JSON(http.StatusOK, gin.H{"ok": true})
	}
}

--- END FILE: portofolio/backend-portofolio/internal/handlers/skill_handler.go ---

--- START FILE: portofolio/backend-portofolio/internal/handlers/upload_handler.go ---
// internal/handlers/upload_handler.go
package handlers

import (
	"fmt"
	"net/http"
	"path/filepath"
	"time"

	"github.com/gin-gonic/gin"
)

func UploadHandler(uploadDir string) gin.HandlerFunc {
	return func(c *gin.Context) {
		file, err := c.FormFile("file")
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "file not found"})
			return
		}

		ext := filepath.Ext(file.Filename)
		if ext == "" {
			ext = ".jpg"
		}
		name := fmt.Sprintf("%s.%d%s",
			time.Now().Format("20060102_150405"),
			time.Now().UnixNano()%1e9,
			ext)

		dst := filepath.Join(uploadDir, name)
		if err := c.SaveUploadedFile(file, dst); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "save error"})
			return
		}

		c.JSON(http.StatusOK, gin.H{
			"url": "/uploads/" + name,
		})
	}
}

--- END FILE: portofolio/backend-portofolio/internal/handlers/upload_handler.go ---

--- START FILE: portofolio/backend-portofolio/internal/middleware/cors.go ---
package middleware

import (
	"net/http"
	"strings"

	"github.com/gin-gonic/gin"
)

func CORSMiddleware(origins string) gin.HandlerFunc {
	allowed := map[string]struct{}{}
	for _, o := range strings.Split(origins, ",") {
		o = strings.TrimSpace(o)
		if o != "" {
			allowed[o] = struct{}{}
		}
	}

	return func(c *gin.Context) {
		origin := c.GetHeader("Origin")

		// Khusus untuk file statis di /uploads: izinkan semua (agar aman untuk canvas)
		// dan jangan kirim Allow-Credentials (syaratnya canvas CORS friendly).
		if strings.HasPrefix(c.Request.URL.Path, "/uploads/") {
			c.Header("Access-Control-Allow-Origin", "*")
			c.Header("Access-Control-Allow-Headers", "Content-Type, Authorization, X-Requested-With")
			c.Header("Access-Control-Allow-Methods", "GET, OPTIONS")
			if c.Request.Method == http.MethodOptions {
				c.AbortWithStatus(http.StatusNoContent)
				return
			}
			c.Next()
			return
		}

		// Untuk endpoint API: whitelist
		if origin != "" {
			if len(allowed) == 0 {
				c.Header("Access-Control-Allow-Origin", origin)
				c.Header("Vary", "Origin")
			} else {
				if _, ok := allowed[origin]; ok {
					c.Header("Access-Control-Allow-Origin", origin)
					c.Header("Vary", "Origin")
				}
			}
		}
		c.Header("Access-Control-Allow-Credentials", "true")
		c.Header("Access-Control-Allow-Headers", "Authorization, Content-Type, X-Requested-With")
		c.Header("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE, OPTIONS")

		if c.Request.Method == http.MethodOptions {
			c.AbortWithStatus(http.StatusNoContent)
			return
		}
		c.Next()
	}
}

--- END FILE: portofolio/backend-portofolio/internal/middleware/cors.go ---

--- START FILE: portofolio/backend-portofolio/internal/middleware/jwt.go ---
package middleware

import (
	"net/http"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/golang-jwt/jwt/v5"
)

func JWTAuth(secret string) gin.HandlerFunc {
	return func(c *gin.Context) {
		auth := c.GetHeader("Authorization")
		if !strings.HasPrefix(strings.ToLower(auth), "bearer ") {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "missing bearer token"})
			return
		}
		tokenStr := strings.TrimSpace(auth[len("Bearer "):])
		token, err := jwt.Parse(tokenStr, func(t *jwt.Token) (interface{}, error) {
			return []byte(secret), nil
		})
		if err != nil || !token.Valid {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "invalid token"})
			return
		}
		if claims, ok := token.Claims.(jwt.MapClaims); ok {
			if exp, ok := claims["exp"].(float64); ok && int64(exp) < time.Now().Unix() {
				c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "token expired"})
				return
			}
		}
		c.Next()
	}
}

--- END FILE: portofolio/backend-portofolio/internal/middleware/jwt.go ---

--- START FILE: portofolio/backend-portofolio/internal/models/achievement.go ---
// internal/models/achievement.go
package models

import "time"

type Achievement struct {
	ID            uint      `json:"id" gorm:"primaryKey"`
	Title         string    `json:"title" gorm:"size:255"`
	Issuer        string    `json:"issuer" gorm:"size:150"`
	Date          time.Time `json:"date"`
	Description   string    `json:"description" gorm:"type:text"`
	CredentialURL string    `json:"credential_url" gorm:"size:500"`
	SortOrder     int       `json:"sort_order" gorm:"default:0"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
}

--- END FILE: portofolio/backend-portofolio/internal/models/achievement.go ---

--- START FILE: portofolio/backend-portofolio/internal/models/experience.go ---
// internal/models/experience.go
package models

import "time"

type Experience struct {
	ID          uint       `json:"id" gorm:"primaryKey"`
	Type        string     `json:"type" gorm:"size:50"`
	Title       string     `json:"title" gorm:"size:200"`
	EntityName  string     `json:"entity_name" gorm:"size:200"`
	Location    string     `json:"location" gorm:"size:200"`
	Description string     `json:"description" gorm:"type:text"`
	StartDate   time.Time  `json:"start_date"`
	EndDate     *time.Time `json:"end_date"`
	SortOrder   int        `json:"sort_order" gorm:"default:0"`
	CreatedAt   time.Time  `json:"created_at"`
	UpdatedAt   time.Time  `json:"updated_at"`
}

--- END FILE: portofolio/backend-portofolio/internal/models/experience.go ---

--- START FILE: portofolio/backend-portofolio/internal/models/profile.go ---
// internal/models/profile.go
package models

type SocialLink struct {
	ID        uint   `json:"id" gorm:"primaryKey"`
	Name      string `json:"name"`
	URL       string `json:"url"`
	Icon      string `json:"icon"`
	Active    bool   `json:"active"`
	ProfileID uint   `json:"-"`
}

type Profile struct {
	ID              uint         `json:"id" gorm:"primaryKey"`
	FullName        string       `json:"full_name"`
	Headline        string       `json:"headline"`
	Bio             string       `json:"bio"`
	PhotoURL        string       `json:"photo_url"`
	Location        string       `json:"location"`
	ResumeURL       string       `json:"resume_url"`
	SkillGroupOrder string       `json:"skill_group_order" gorm:"type:text"`
	Socials         []SocialLink `json:"socials"`
}
--- END FILE: portofolio/backend-portofolio/internal/models/profile.go ---

--- START FILE: portofolio/backend-portofolio/internal/models/project.go ---
// internal/models/project.go
package models

import "time"

type Project struct {
	ID          uint   `json:"id" gorm:"primaryKey"`
	Slug        string `json:"slug" gorm:"uniqueIndex;size:160;not null"`
	Title       string `json:"title" gorm:"size:220;not null"`

	Summary     string `json:"summary" gorm:"size:1000"`
	Body        string `json:"body" gorm:"type:text"`
	CoverURL    string `json:"cover_url" gorm:"size:500"`
	RepoURL     string `json:"repo_url" gorm:"size:500"`
	DemoURL     string `json:"demo_url" gorm:"size:500"`
	TechStack   string `json:"tech_stack" gorm:"size:500"`

	GalleryJSON string `json:"gallery_json" gorm:"type:text"`
	Role        string `json:"role" gorm:"size:40"`
	Status      string `json:"status" gorm:"size:20;default:published"`
	IsFeatured  bool   `json:"is_featured" gorm:"default:false"`
	ViewCount   int    `json:"view_count" gorm:"default:0"`

	SortOrder *int `json:"sort_order" gorm:"index"`

	StartDate *time.Time `json:"start_date"`
	EndDate   *time.Time `json:"end_date"`
	CreatedAt time.Time  `json:"created_at"`
	UpdatedAt time.Time  `json:"updated_at"`
}
--- END FILE: portofolio/backend-portofolio/internal/models/project.go ---

--- START FILE: portofolio/backend-portofolio/internal/models/skill.go ---
// internal/models/skill.go
package models

import "time"

type Skill struct {
	ID        uint      `json:"id" gorm:"primaryKey"`
	Group     string    `json:"group"`
	Name      string    `json:"name"`
	SortOrder int       `json:"sort_order" gorm:"default:0"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

--- END FILE: portofolio/backend-portofolio/internal/models/skill.go ---

--- START FILE: portofolio/backend-portofolio/internal/server/router.go ---
//internal/server/router.go
package server

import (
	"backend-portofolio/internal/config"
	"backend-portofolio/internal/db"
	"backend-portofolio/internal/handlers"
	"backend-portofolio/internal/middleware"
	"backend-portofolio/internal/models"

	"github.com/gin-gonic/gin"
)

func SetupRouter(cfg *config.Config) *gin.Engine {
	r := gin.Default()
	r.Use(middleware.CORSMiddleware(cfg.CORSOrigins))

	r.Static("/uploads", cfg.UploadDir)

	_ = db.Conn.AutoMigrate(
		&models.Profile{},
		&models.SocialLink{},
		&models.Skill{},
		&models.Project{},
		&models.Experience{},
		&models.Achievement{},
	)

	r.GET("/api/projects", handlers.ListPublicProjects())
	r.GET("/api/projects/:slug", handlers.GetProjectBySlug())
	r.GET("/api/profile", handlers.GetProfilePublic())
	r.GET("/api/skills", handlers.GetSkillsPublic())
	r.GET("/api/experiences", handlers.ListPublicExperiences())
	r.GET("/api/achievements", handlers.ListPublicAchievements())

	r.POST("/api/auth/login",
		handlers.LoginHandler(cfg.JWTSecret, cfg.AdminEmail, cfg.AdminPassword))

	admin := r.Group("/api/admin", middleware.JWTAuth(cfg.JWTSecret))
	{
		admin.GET("/projects", handlers.AdminListProjects())
		admin.POST("/projects", handlers.CreateProject())
		admin.PUT("/projects/:id", handlers.UpdateProject())
		admin.DELETE("/projects/:id", handlers.DeleteProject())
		admin.POST("/projects/reorder", handlers.ReorderProjects())

		admin.POST("/upload", handlers.UploadHandler(cfg.UploadDir))
		admin.PUT("/profile", handlers.UpsertProfile())

		admin.GET("/skills", handlers.AdminListSkills())
		admin.POST("/skills", handlers.CreateSkill())
		admin.PUT("/skills/:id", handlers.UpdateSkill())
		admin.DELETE("/skills/:id", handlers.DeleteSkill())
		admin.POST("/skills/reorder", handlers.ReorderSkills())

		admin.GET("/experiences", handlers.AdminListExperiences())
		admin.POST("/experiences", handlers.CreateExperience())
		admin.PUT("/experiences/:id", handlers.UpdateExperience())
		admin.DELETE("/experiences/:id", handlers.DeleteExperience())

		admin.GET("/achievements", handlers.AdminListAchievements())
		admin.POST("/achievements", handlers.CreateAchievement())
		admin.PUT("/achievements/:id", handlers.UpdateAchievement())
		admin.DELETE("/achievements/:id", handlers.DeleteAchievement())
	}

	return r
}

--- END FILE: portofolio/backend-portofolio/internal/server/router.go ---

--- START FILE: portofolio/docker-compose.yml ---
# /docker-compose.yml
services:
  db:
    image: postgres:16-alpine
    container_name: portfolio_db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME} -h 127.0.0.1" ]
      interval: 5s
      timeout: 3s
      retries: 20
    networks: [ appnet ]

  backend:
    build: ./backend-portofolio
    container_name: portfolio_backend
    depends_on:
      db:
        condition: service_healthy
    environment:
      APP_PORT: ${APP_PORT}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      CORS_ORIGINS: ${CORS_ORIGINS}
    volumes:
      - ./uploads:/app/storage/uploads
    ports:
      - "8080:8080"
    networks: [ appnet ]

  adminer:
    image: adminer:latest
    container_name: portfolio_adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    networks: [ appnet ]
volumes:
  db_data:


networks:
  appnet:
    driver: bridge

--- END FILE: portofolio/docker-compose.yml ---

--- START FILE: portofolio/frontend-portofolio/.env.local ---
#.env.local
VITE_API_BASE_URL=http://localhost:8080

--- END FILE: portofolio/frontend-portofolio/.env.local ---

--- START FILE: portofolio/frontend-portofolio/.gitignore ---
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

--- END FILE: portofolio/frontend-portofolio/.gitignore ---

--- START FILE: portofolio/frontend-portofolio/eslint.config.js ---
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])

--- END FILE: portofolio/frontend-portofolio/eslint.config.js ---

--- START FILE: portofolio/frontend-portofolio/index.css ---
.markdown-body img,
.article-content img,
.project-content img {
    max-width: 100%;
    height: auto;
    display: block;
}
--- END FILE: portofolio/frontend-portofolio/index.css ---

--- START FILE: portofolio/frontend-portofolio/index.html ---
<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <link rel="icon" type="" href="/Logo.PNG" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Portofolio Website Vic</title>
  <style>
    .swal2-rounded {
      border-radius: 16px !important;
    }

    .swal2-strong {
      font-weight: 800 !important;
      letter-spacing: -0.02em;
    }
  </style>
</head>

<body>
  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>
</body>

</html>
--- END FILE: portofolio/frontend-portofolio/index.html ---

--- START FILE: portofolio/frontend-portofolio/package.json ---
{
  "name": "frontend-portofolio",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@dnd-kit/core": "^6.3.1",
    "@dnd-kit/sortable": "^10.0.0",
    "@dnd-kit/utilities": "^3.2.2",
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.1",
    "@hello-pangea/dnd": "^18.0.1",
    "@mui/icons-material": "^7.3.2",
    "@mui/lab": "^7.0.0-beta.17",
    "@mui/material": "^7.3.2",
    "@mui/x-data-grid": "^8.11.3",
    "@react-three/drei": "^10.7.6",
    "@react-three/fiber": "^9.3.0",
    "axios": "^1.12.2",
    "date-fns": "^4.1.0",
    "dompurify": "^3.2.7",
    "formik": "^2.4.6",
    "framer-motion": "^12.23.18",
    "markdown-it": "^14.1.0",
    "marked": "^16.3.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-dropzone": "^14.3.8",
    "react-easy-crop": "^5.5.1",
    "react-image-crop": "^11.0.10",
    "react-markdown": "^10.1.0",
    "react-router-dom": "^7.9.1",
    "react-tsparticles": "^2.12.2",
    "remark-gfm": "^4.0.1",
    "sweetalert2": "^11.23.0",
    "sweetalert2-react-content": "^5.1.0",
    "three": "^0.180.0",
    "tsparticles-slim": "^2.12.0",
    "yup": "^1.7.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@types/react": "^19.1.13",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.3",
    "eslint": "^9.36.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.4.0",
    "vite": "^7.1.7"
  }
}

--- END FILE: portofolio/frontend-portofolio/package.json ---

--- START FILE: portofolio/frontend-portofolio/src/api/achievements.js ---
// src/api/achievements.js
import { api } from './client'

// --- PUBLIC ---
export const fetchPublicAchievements = async () => {
    const { data } = await api.get('/api/achievements')
    return Array.isArray(data) ? data : []
}

// --- ADMIN ---
export const fetchAdminAchievements = async () => {
    const { data } = await api.get('/api/admin/achievements')
    return Array.isArray(data) ? data : []
}

export const createAdminAchievement = async (payload) => {
    const { data } = await api.post('/api/admin/achievements', payload)
    return data
}

export const updateAdminAchievement = async (id, payload) => {
    const { data } = await api.put(`/api/admin/achievements/${id}`, payload)
    return data
}

export const deleteAdminAchievement = async (id) => {
    await api.delete(`/api/admin/achievements/${id}`)
}
--- END FILE: portofolio/frontend-portofolio/src/api/achievements.js ---

--- START FILE: portofolio/frontend-portofolio/src/api/axios.js ---
import Axios from 'axios'

const base = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8080'

const axios = Axios.create({
    baseURL: base,
    withCredentials: true,
})

export default axios

--- END FILE: portofolio/frontend-portofolio/src/api/axios.js ---

--- START FILE: portofolio/frontend-portofolio/src/api/client.js ---
//src/api/client.js
import axios from 'axios'

const baseURL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8080'
export const api = axios.create({ baseURL })

api.interceptors.request.use((config) => {
    const t = localStorage.getItem('admin-token')
    if (t) config.headers.Authorization = `Bearer ${t}`
    return config
})
--- END FILE: portofolio/frontend-portofolio/src/api/client.js ---

--- START FILE: portofolio/frontend-portofolio/src/api/experiences.js ---
// src/api/experiences.js
import { api } from './client'

// --- PUBLIC ---
export const fetchPublicExperiences = async () => {
    const { data } = await api.get('/api/experiences')
    return Array.isArray(data) ? data : []
}

// --- ADMIN ---
export const fetchAdminExperiences = async () => {
    const { data } = await api.get('/api/admin/experiences')
    return Array.isArray(data) ? data : []
}

export const createAdminExperience = async (payload) => {
    const { data } = await api.post('/api/admin/experiences', payload)
    return data
}

export const updateAdminExperience = async (id, payload) => {
    const { data } = await api.put(`/api/admin/experiences/${id}`, payload)
    return data
}

export const deleteAdminExperience = async (id) => {
    await api.delete(`/api/admin/experiences/${id}`)
}
--- END FILE: portofolio/frontend-portofolio/src/api/experiences.js ---

--- START FILE: portofolio/frontend-portofolio/src/api/profile.js ---
// src/api/profile.js
import { api } from './client'

// --- PUBLIC ---
export const fetchPublicProfile = async () => {
    const { data } = await api.get('/api/profile')
    if (data && typeof data === 'object' && data.profile === null) return null
    return data
}

export const fetchPublicSkills = async () => {
    const { data } = await api.get('/api/skills')
    return Array.isArray(data) ? data : []
}

// --- ADMIN ---
export const fetchAdminProfile = async () => {
    const { data } = await api.get('/api/profile')
    return data
}

export const upsertAdminProfile = async (payload) => {
    const { data } = await api.put('/api/admin/profile', payload)
    return data
}
--- END FILE: portofolio/frontend-portofolio/src/api/profile.js ---

--- START FILE: portofolio/frontend-portofolio/src/api/projects.js ---
// src/api/projects.js (punyamu sudah benar)
import { api } from './client'

export async function getProjectsPublic() {
    const { data } = await api.get('/api/projects')
    return data
}
export async function getProjectBySlug(slug) {
    const { data } = await api.get(`/api/projects/${slug}`)
    return data
}
export async function getProjectsAdmin() {
    const { data } = await api.get('/api/admin/projects')
    return data
}
export async function getProjectAdminById(id) {
    const { data } = await api.get(`/api/admin/projects/${id}`)
    return data
}
export async function createProject(payload) {
    const { data } = await api.post('/api/admin/projects', payload)
    return data
}
export async function updateProject(id, payload) {
    const { data } = await api.put(`/api/admin/projects/${id}`, payload)
    return data
}
export async function deleteProject(id) {
    await api.delete(`/api/admin/projects/${id}`)
}

// tetap: kirim { orders: [{id, sort_order}] }, fallback per item
export async function reorderProjects(orders) {
    try {
        const { data } = await api.put('/api/admin/projects/reorder', { orders })
        return data
    } catch {
        for (const o of orders) {
            await api.put(`/api/admin/projects/${o.id}`, { sort_order: o.sort_order })
        }
        return { ok: true }
    }
}

--- END FILE: portofolio/frontend-portofolio/src/api/projects.js ---

--- START FILE: portofolio/frontend-portofolio/src/api/skills.js ---
// src/api/skills.js
import { api } from './client'

export const fetchAdminSkills = async () => {
    const { data } = await api.get('/api/admin/skills')
    return Array.isArray(data) ? data : []
}

export const createAdminSkill = async (payload) => {
    const { data } = await api.post('/api/admin/skills', payload)
    return data
}

export const updateAdminSkill = async (id, payload) => {
    const { data } = await api.put(`/api/admin/skills/${id}`, payload)
    return data
}

export const deleteAdminSkill = async (id) => {
    await api.delete(`/api/admin/skills/${id}`)
}

export const reorderAdminSkills = async (orders) => {
    const { data } = await api.post('/api/admin/skills/reorder', { orders })
    return data
}
--- END FILE: portofolio/frontend-portofolio/src/api/skills.js ---

--- START FILE: portofolio/frontend-portofolio/src/App.jsx ---
//src/App.jsx
import { useEffect, useMemo, useState, Suspense } from 'react'
import { Container, Box } from '@mui/material'
import { Routes, Route, useLocation } from 'react-router-dom'
import { ThemeProvider, CssBaseline } from '@mui/material'
import { getTheme } from './theme'
import { AnimatePresence, motion as Motion } from 'framer-motion'
import Header from './components/layout/Header'
import Footer from './components/layout/Footer'
import Home from './pages/Home'
import Projects from './pages/Projects'
import ProjectDetail from './pages/ProjectDetail'
import About from './pages/About'
import Login from './pages/admin/Login'
import Dashboard from './pages/admin/Dashboard'
import AdminProjects from './pages/admin/AdminProjects'
import AdminProfile from './pages/admin/AdminProfile'
import AdminSkills from './pages/admin/AdminSkills'
import AdminExperiences from './pages/admin/AdminExperiences'
import AdminAchievements from './pages/admin/AdminAchievements'
import PrivateRoute from './auth/PrivateRoute'
import AdminHeader from './components/layout/admin/AdminHeader'
import AnimatedBackground from './components/ui/AnimatedBackground'
import Interactive3D from './components/ui/Interactive3D'

const pageVariants = {
  initial: { opacity: 0, y: 20 },
  in: { opacity: 1, y: 0 },
  out: { opacity: 0, y: -20 },
}

const pageTransition = {
  type: 'tween',
  ease: 'anticipate',
  duration: 0.5,
}

function PageLayout({ children }) {
  return (
    <Motion.div initial="initial" animate="in" exit="out" variants={pageVariants} transition={pageTransition}>
      {children}
    </Motion.div>
  )
}

function PublicLayout({ children, mode, toggleMode }) {
  const location = useLocation();
  const isHomePage = location.pathname === '/';

  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', minHeight: '100vh' }}>
      <Header mode={mode} toggleMode={toggleMode} />
      {isHomePage ? (
        children
      ) : (
        <>
          <Container component="main" sx={{ flex: 1, position: 'relative', zIndex: 1, py: 4 }}>
            <PageLayout>{children}</PageLayout>
          </Container>
          <Footer />
        </>
      )}
    </Box>
  );
}

function AdminLayout({ children }) {
  return (
    <Box sx={{ minHeight: '100vh', position: 'relative', display: 'flex', flexDirection: 'column' }}>
      <AdminHeader />
      <Container component="main" sx={{ py: 4, position: 'relative', zIndex: 1, flex: 1 }}>
        <PageLayout>{children}</PageLayout>
      </Container>
      <Footer />
    </Box>
  )
}

export default function App() {
  const location = useLocation()
  const isHomePage = location.pathname === '/';

  const initialMode = (() => {
    const saved = localStorage.getItem('theme')
    if (saved === 'light' || saved === 'dark') return saved
    return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
  })()
  const [mode, setMode] = useState(initialMode)
  const theme = useMemo(() => getTheme(mode), [mode])

  useEffect(() => {
    localStorage.setItem('theme', mode)
    document.body.setAttribute('data-color-mode', mode)
  }, [mode])

  const toggleMode = () => setMode((prev) => (prev === 'light' ? 'dark' : 'light'))

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />

      {isHomePage ? (
        <Suspense fallback={null}><Interactive3D /></Suspense>
      ) : (
        <AnimatedBackground />
      )}

      <AnimatePresence mode="wait">
        <Routes location={location} key={location.pathname}>
          <Route path="/" element={<PublicLayout mode={mode} toggleMode={toggleMode}><Home /></PublicLayout>} />
          <Route path="/projects" element={<PublicLayout mode={mode} toggleMode={toggleMode}><Projects /></PublicLayout>} />
          <Route path="/projects/:slug" element={<PublicLayout mode={mode} toggleMode={toggleMode}><ProjectDetail /></PublicLayout>} />
          <Route path="/about" element={<PublicLayout mode={mode} toggleMode={toggleMode}><About /></PublicLayout>} />

          <Route path="/admin/login" element={<Login />} />
          <Route path="/admin" element={<PrivateRoute><AdminLayout><Dashboard /></AdminLayout></PrivateRoute>} />
          <Route path="/admin/projects" element={<PrivateRoute><AdminLayout><AdminProjects /></AdminLayout></PrivateRoute>} />
          <Route path="/admin/profile" element={<PrivateRoute><AdminLayout><AdminProfile /></AdminLayout></PrivateRoute>} />
          <Route path="/admin/skills" element={<PrivateRoute><AdminLayout><AdminSkills /></AdminLayout></PrivateRoute>} />
          <Route path="/admin/experiences" element={<PrivateRoute><AdminLayout><AdminExperiences /></AdminLayout></PrivateRoute>} />
          <Route path="/admin/achievements" element={<PrivateRoute><AdminLayout><AdminAchievements /></AdminLayout></PrivateRoute>} />
        </Routes>
      </AnimatePresence>
    </ThemeProvider>
  )
}
--- END FILE: portofolio/frontend-portofolio/src/App.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/auth/authContext.js ---
//src/auth/authContext.js
import { createContext } from 'react'

export const AuthContext = createContext({
    token: null,
    login: async () => { },
    logout: () => { },
})

--- END FILE: portofolio/frontend-portofolio/src/auth/authContext.js ---

--- START FILE: portofolio/frontend-portofolio/src/auth/AuthProvider.jsx ---
//src/auth/AuthProvider.jsx
import { useEffect, useState } from 'react'
import { AuthContext } from './authContext'
import { api } from '../api/client'

export default function AuthProvider({ children }) {
    const [token, setToken] = useState(() => localStorage.getItem('admin-token'))

    useEffect(() => {
        if (token) localStorage.setItem('admin-token', token)
        else localStorage.removeItem('admin-token')
    }, [token])

    const login = async ({ email, password }) => {
        const { data } = await api.post('/api/auth/login', { email, password })
        const t = data?.access_token || data?.token || data?.jwt || data?.data?.access_token
        if (!t) throw new Error('Token tidak ditemukan pada respons login')
        setToken(t)
        return true
    }

    const logout = () => setToken(null)

    return <AuthContext.Provider value={{ token, login, logout }}>{children}</AuthContext.Provider>
}
--- END FILE: portofolio/frontend-portofolio/src/auth/AuthProvider.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/auth/PrivateRoute.jsx ---
//src/auth/PrivateRoute.jsx
import { Navigate } from 'react-router-dom'
import { useAuth } from './useAuth'

export default function PrivateRoute({ children }) {
    const { token } = useAuth()
    if (!token) return <Navigate to="/admin/login" replace />
    return children
}
--- END FILE: portofolio/frontend-portofolio/src/auth/PrivateRoute.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/auth/useAuth.js ---
//src/auth/useAuth.js
import { useContext } from 'react'
import { AuthContext } from './authContext'
export const useAuth = () => useContext(AuthContext)

--- END FILE: portofolio/frontend-portofolio/src/auth/useAuth.js ---

--- START FILE: portofolio/frontend-portofolio/src/components/admin/AchievementFormModal.jsx ---
// src/components/admin/AchievementFormModal.jsx
import { Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, Stack } from '@mui/material';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import { useEffect } from 'react';

const validationSchema = Yup.object({
    title: Yup.string().required('Judul wajib diisi'),
    issuer: Yup.string().required('Penerbit/Penyelenggara wajib diisi'),
    date: Yup.date().required('Tanggal wajib diisi'),
});

const formatDateForInput = (dateStr) => {
    if (!dateStr) return '';
    return new Date(dateStr).toISOString().split('T')[0];
};

export default function AchievementFormModal({ open, onClose, onSubmit, initialData = null }) {
    const formik = useFormik({
        initialValues: {
            title: '',
            issuer: '',
            date: '',
            description: '',
            credential_url: '',
        },
        validationSchema,
        onSubmit: (values) => {
            const payload = {
                ...values,
                date: new Date(values.date).toISOString(),
            };
            onSubmit(payload);
        },
    });

    useEffect(() => {
        if (open) {
            formik.resetForm();
            if (initialData) {
                formik.setValues({
                    title: initialData.title || '',
                    issuer: initialData.issuer || '',
                    date: formatDateForInput(initialData.date),
                    description: initialData.description || '',
                    credential_url: initialData.credential_url || '',
                }, false);
            }
        }
    }, [open, initialData]); // eslint-disable-line

    return (
        <Dialog open={open} onClose={onClose} fullWidth maxWidth="sm">
            <form onSubmit={formik.handleSubmit}>
                <DialogTitle fontWeight={700}>{initialData ? 'Edit Pencapaian' : 'Tambah Pencapaian'}</DialogTitle>
                <DialogContent>
                    <Stack spacing={2} sx={{ pt: 1 }}>
                        <TextField name="title" label="Judul Pencapaian" {...formik.getFieldProps('title')} error={formik.touched.title && !!formik.errors.title} helperText={formik.touched.title && formik.errors.title} />
                        <TextField name="issuer" label="Penerbit / Penyelenggara" {...formik.getFieldProps('issuer')} error={formik.touched.issuer && !!formik.errors.issuer} helperText={formik.touched.issuer && formik.errors.issuer} />
                        <TextField name="date" label="Tanggal" type="date" InputLabelProps={{ shrink: true }} {...formik.getFieldProps('date')} error={formik.touched.date && !!formik.errors.date} helperText={formik.touched.date && formik.errors.date} />
                        <TextField name="description" label="Deskripsi (opsional)" multiline rows={3} {...formik.getFieldProps('description')} />
                        <TextField name="credential_url" label="Link Kredensial (opsional)" {...formik.getFieldProps('credential_url')} />
                    </Stack>
                </DialogContent>
                <DialogActions>
                    <Button onClick={onClose}>Batal</Button>
                    <Button type="submit" variant="contained" disabled={formik.isSubmitting}>Simpan</Button>
                </DialogActions>
            </form>
        </Dialog>
    );
}
--- END FILE: portofolio/frontend-portofolio/src/components/admin/AchievementFormModal.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/admin/DropzoneUpload.jsx ---
//src/components/admin/DropzoneUpload.jsx
import { useCallback, useState, useRef } from 'react'
import { useDropzone } from 'react-dropzone'
import { Box, Button, Stack, Typography } from '@mui/material'
import { api } from '../../api/client'

export default function DropzoneUpload({ label = 'Tambah Gambar', multiple = true, onUploaded, height = 140 }) {
    const [busy, setBusy] = useState(false)
    const fileRef = useRef(null)

    const uploadFiles = async (files) => {
        const urls = []
        for (const f of files) {
            const fd = new FormData()
            fd.append('file', f)
            const { data } = await api.post('/api/admin/upload', fd, { headers: { 'Content-Type': 'multipart/form-data' } })
            urls.push(data?.url)
        }
        return urls
    }

    const onDrop = useCallback(async (accepted) => {
        if (!accepted?.length) return
        setBusy(true)
        try {
            const urls = await uploadFiles(accepted)
            onUploaded?.(multiple ? urls : urls[0])
        } finally {
            setBusy(false)
        }
    }, [multiple, onUploaded])

    const { getRootProps, getInputProps, isDragActive } = useDropzone({
        onDrop,
        multiple,
        accept: { 'image/*': [] },
        noClick: true,
    })

    const onPick = () => fileRef.current?.click()
    const onManualPick = async (e) => {
        const files = Array.from(e.target.files || [])
        if (!files.length) return
        setBusy(true)
        try {
            const urls = await uploadFiles(files)
            onUploaded?.(multiple ? urls : urls[0])
        } finally {
            setBusy(false)
            e.target.value = ''
        }
    }

    return (
        <Stack spacing={1}>
            <Box
                {...getRootProps()}
                sx={{
                    border: '1px dashed',
                    borderColor: 'divider',
                    borderRadius: 2,
                    height,
                    display: 'grid',
                    placeItems: 'center',
                    bgcolor: t => isDragActive ? `${t.palette.primary.main}11` : 'transparent',
                    transition: 'background .2s',
                    px: 2,
                    textAlign: 'center',
                }}
            >
                <input {...getInputProps()} />
                <Typography variant="body2" color="text.secondary">
                    {busy ? 'Mengunggah…' : (isDragActive ? 'Lepaskan file di sini' : 'Tarik & letakkan gambar di sini')}
                </Typography>
            </Box>
            <Stack direction="row" spacing={1} alignItems="center">
                <input ref={fileRef} type="file" accept="image/*" hidden multiple={multiple} onChange={onManualPick} />
                <Button variant="outlined" onClick={onPick} disabled={busy}>{label}</Button>
                <Typography variant="caption" color="text.secondary">PNG/JPG</Typography>
            </Stack>
        </Stack>
    )
}

--- END FILE: portofolio/frontend-portofolio/src/components/admin/DropzoneUpload.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/admin/ExperienceFormModal.jsx ---
// src/components/admin/ExperienceFormModal.jsx
import { Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, Stack, MenuItem, Grid, Typography } from '@mui/material';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import { useEffect } from 'react';
import { getYear, getMonth } from 'date-fns';

const validationSchema = Yup.object({
    type: Yup.string().required('Tipe wajib dipilih'),
    title: Yup.string().required('Judul/Posisi wajib diisi'),
    entity_name: Yup.string().required('Nama perusahaan/kampus wajib diisi'),
    start_year: Yup.number().required('Tahun mulai wajib diisi'),
    start_month: Yup.number().required('Bulan mulai wajib diisi'),
});

const MONTHS = [
    { value: 0, label: 'Januari' }, { value: 1, label: 'Februari' }, { value: 2, label: 'Maret' },
    { value: 3, label: 'April' }, { value: 4, label: 'Mei' }, { value: 5, label: 'Juni' },
    { value: 6, label: 'Juli' }, { value: 7, label: 'Agustus' }, { value: 8, label: 'September' },
    { value: 9, label: 'Oktober' }, { value: 10, label: 'November' }, { value: 11, label: 'Desember' },
];

export default function ExperienceFormModal({ open, onClose, onSubmit, initialData = null }) {
    const formik = useFormik({
        initialValues: {
            type: 'Magang', title: '', entity_name: '', location: '',
            description: '', start_month: '', start_year: '',
            end_month: '', end_year: '',
        },
        validationSchema,
        onSubmit: (values) => {
            const startDate = new Date(values.start_year, values.start_month);
            const endDate = (values.end_year && values.end_month !== '') ? new Date(values.end_year, values.end_month) : null;

            const payload = {
                ...values,
                start_date: startDate.toISOString(),
                end_date: endDate ? endDate.toISOString() : null,
            };
            delete payload.start_month;
            delete payload.start_year;
            delete payload.end_month;
            delete payload.end_year;
            onSubmit(payload);
        },
    });

    useEffect(() => {
        if (open) {
            formik.resetForm();
            if (initialData) {
                const startDate = initialData.start_date ? new Date(initialData.start_date) : null;
                const endDate = initialData.end_date ? new Date(initialData.end_date) : null;
                formik.setValues({
                    type: initialData.type || 'Magang',
                    title: initialData.title || '',
                    entity_name: initialData.entity_name || '',
                    location: initialData.location || '',
                    description: initialData.description || '',
                    start_month: startDate ? getMonth(startDate) : '',
                    start_year: startDate ? getYear(startDate) : '',
                    end_month: endDate ? getMonth(endDate) : '',
                    end_year: endDate ? getYear(endDate) : '',
                }, false);
            }
        }
    }, [open, initialData]); // eslint-disable-line

    return (
        <Dialog open={open} onClose={onClose} fullWidth maxWidth="sm">
            <form onSubmit={formik.handleSubmit}>
                <DialogTitle fontWeight={700}>{initialData ? 'Edit Pengalaman' : 'Tambah Pengalaman'}</DialogTitle>
                <DialogContent>
                    <Stack spacing={2} sx={{ pt: 1 }}>
                        <TextField select label="Tipe" name="type" value={formik.values.type} onChange={formik.handleChange}>
                            <MenuItem value="Pekerjaan Penuh Waktu">Pekerjaan Penuh Waktu</MenuItem>
                            <MenuItem value="Magang">Magang</MenuItem>
                            <MenuItem value="Organisasi">Organisasi</MenuItem>
                            <MenuItem value="Pendidikan">Pendidikan</MenuItem>
                        </TextField>
                        <TextField name="title" label="Judul / Posisi" {...formik.getFieldProps('title')} error={formik.touched.title && !!formik.errors.title} helperText={formik.touched.title && formik.errors.title} />
                        <TextField name="entity_name" label="Nama Perusahaan / Kampus / Organisasi" {...formik.getFieldProps('entity_name')} error={formik.touched.entity_name && !!formik.errors.entity_name} helperText={formik.touched.entity_name && formik.errors.entity_name} />
                        <TextField name="location" label="Lokasi (opsional)" {...formik.getFieldProps('location')} />
                        <TextField name="description" label="Deskripsi (opsional)" multiline rows={4} {...formik.getFieldProps('description')} />

                        <Typography variant="subtitle2" color="text.secondary">Tanggal Mulai</Typography>
                        <Grid container spacing={2}>
                            <Grid item xs={6}><TextField select label="Bulan" name="start_month" {...formik.getFieldProps('start_month')} error={formik.touched.start_month && !!formik.errors.start_month}>{MONTHS.map(m => <MenuItem key={m.value} value={m.value}>{m.label}</MenuItem>)}</TextField></Grid>
                            <Grid item xs={6}><TextField type="number" label="Tahun" name="start_year" {...formik.getFieldProps('start_year')} error={formik.touched.start_year && !!formik.errors.start_year} /></Grid>
                        </Grid>

                        <Typography variant="subtitle2" color="text.secondary">Tanggal Selesai (kosongkan jika masih berjalan)</Typography>
                        <Grid container spacing={2}>
                            <Grid item xs={6}><TextField select label="Bulan" name="end_month" {...formik.getFieldProps('end_month')}>{MONTHS.map(m => <MenuItem key={m.value} value={m.value}>{m.label}</MenuItem>)}</TextField></Grid>
                            <Grid item xs={6}><TextField type="number" label="Tahun" name="end_year" {...formik.getFieldProps('end_year')} /></Grid>
                        </Grid>
                    </Stack>
                </DialogContent>
                <DialogActions>
                    <Button onClick={onClose}>Batal</Button>
                    <Button type="submit" variant="contained" disabled={formik.isSubmitting}>Simpan</Button>
                </DialogActions>
            </form>
        </Dialog>
    );
}
--- END FILE: portofolio/frontend-portofolio/src/components/admin/ExperienceFormModal.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/admin/GalleryManager.jsx ---
//src/components/admin/GalleryManager.jsx
import { Box, IconButton, Stack } from '@mui/material'
import DeleteIcon from '@mui/icons-material/Delete'
import DragIndicatorIcon from '@mui/icons-material/DragIndicator'
import { useMemo, useRef, useState } from 'react'

export default function GalleryManager({ items = [], onChange }) {
    const [list, setList] = useState(items)
    const [dragIdx, setDragIdx] = useState(null)
    const [overIdx, setOverIdx] = useState(null)
    const dragIndexRef = useRef(null)

    useMemo(() => {
        if (JSON.stringify(items) !== JSON.stringify(list)) setList(items)
    }, [items]) // eslint-disable-line

    const commit = (arr) => {
        setList(arr)
        onChange?.(arr)
    }

    const onDragStart = (e, idx) => {
        dragIndexRef.current = idx
        setDragIdx(idx)
        const ghost = document.createElement('div')
        ghost.style.width = '0px'
        ghost.style.height = '0px'
        document.body.appendChild(ghost)
        e.dataTransfer.setDragImage(ghost, 0, 0)
        setTimeout(() => document.body.removeChild(ghost), 0)
        e.dataTransfer.effectAllowed = 'move'
    }

    const onDragOver = (e, idx) => {
        e.preventDefault()
        setOverIdx(idx)
    }

    const onDrop = (e, idx) => {
        e.preventDefault()
        const from = dragIndexRef.current
        const to = idx
        setOverIdx(null)
        setDragIdx(null)
        dragIndexRef.current = null
        if (from === null || to === null || from === to) return
        const arr = [...list]
        const [moved] = arr.splice(from, 1)
        arr.splice(to, 0, moved)
        commit(arr)
    }

    const onDragEnd = () => { setOverIdx(null); setDragIdx(null); dragIndexRef.current = null }

    const removeAt = (idx) => {
        const arr = list.filter((_, i) => i !== idx)
        commit(arr)
    }

    return (
        <Box
            sx={{
                display: 'grid',
                gridTemplateColumns: 'repeat(auto-fill, minmax(140px,1fr))',
                gap: 1,
                '& > .gm-item': { transition: 'transform .18s ease, box-shadow .18s ease' },
                '& > .gm-item.dragging': { transform: 'scale(1.05) rotate(1deg)', boxShadow: 6, zIndex: 1 },
                '& > .gm-item.over': { transform: 'translateY(-4px)', boxShadow: 4 },
            }}
        >
            {list.map((src, i) => (
                <Box
                    key={src + i}
                    className={`gm-item${dragIdx === i ? ' dragging' : ''}${overIdx === i ? ' over' : ''}`}
                    draggable
                    onDragStart={(e) => onDragStart(e, i)}
                    onDragOver={(e) => onDragOver(e, i)}
                    onDrop={(e) => onDrop(e, i)}
                    onDragEnd={onDragEnd}
                    sx={{
                        border: '1px solid',
                        borderColor: 'divider',
                        borderRadius: 2,
                        overflow: 'hidden',
                        position: 'relative',
                        userSelect: 'none',
                        cursor: 'grab',
                        bgcolor: 'background.paper',
                    }}
                >
                    <img src={src} alt={`g-${i}`} style={{ width: '100%', height: 120, objectFit: 'cover', display: 'block' }} />

                    <Stack direction="row" spacing={0.5} sx={{ position: 'absolute', top: 6, left: 6 }}>
                        <IconButton size="small" sx={{ bgcolor: 'rgba(0,0,0,.45)', color: 'white' }} disableRipple>
                            <DragIndicatorIcon fontSize="small" />
                        </IconButton>
                    </Stack>
                    <IconButton
                        size="small"
                        onClick={() => removeAt(i)}
                        sx={{ position: 'absolute', top: 6, right: 6, bgcolor: 'rgba(0,0,0,.45)', color: 'white' }}
                    >
                        <DeleteIcon fontSize="small" />
                    </IconButton>
                </Box>
            ))}
        </Box>
    )
}

--- END FILE: portofolio/frontend-portofolio/src/components/admin/GalleryManager.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/admin/ImageCropper.jsx ---
// src/components/admin/ImageCropper.jsx
import { useEffect, useRef, useState, useCallback } from 'react'
import {
    Dialog, DialogTitle, DialogContent, DialogActions,
    Button, Slider, Stack, ToggleButtonGroup, ToggleButton, Box
} from '@mui/material'
import ReactCrop, { centerCrop, makeAspectCrop } from 'react-image-crop'
import 'react-image-crop/dist/ReactCrop.css'

const PRESETS = [
    { key: 'free', label: 'BEBAS', value: 0 },
    { key: '16:9', label: '16:9 (LAPTOP)', value: 16 / 9 },
    { key: '4:3', label: '4:3', value: 4 / 3 },
    { key: '1:1', label: '1:1', value: 1 },
    { key: '9:16', label: '9:16 (STORY)', value: 9 / 16 },
]

function toCanvasBlob(canvas, type = 'image/jpeg', quality = 0.92) {
    return new Promise((resolve) => canvas.toBlob((b) => resolve(b), type, quality))
}

export default function ImageCropper({ open, src, onClose, onCropped, initialAspect }) {
    const imgRef = useRef(null)
    const [zoom, setZoom] = useState(1)
    const [aspect, setAspect] = useState(initialAspect || 0) // 0 = free
    const [crop, setCrop] = useState()
    const [completedCrop, setCompletedCrop] = useState()

    // Hitung crop center saat gambar load / saat preset aspect berubah
    const onImageLoad = useCallback((e) => {
        const img = e.currentTarget
        const { width, height } = img
        if (aspect) {
            const mc = makeAspectCrop(
                { unit: '%', width: 90 }, // kasih lebar awal 90%
                aspect,
                width,
                height
            )
            setCrop(centerCrop(mc, width, height))
        } else {
            setCrop({ unit: '%', x: 5, y: 5, width: 90, height: 90 })
        }
    }, [aspect])

    useEffect(() => {
        // ketika user klik preset lain -> re-center crop instan
        if (!imgRef.current) return
        const img = imgRef.current
        const { width, height } = img
        if (aspect) {
            const mc = makeAspectCrop({ unit: '%', width: 90 }, aspect, width, height)
            setCrop(centerCrop(mc, width, height))
        } else {
            setCrop({ unit: '%', x: 5, y: 5, width: 90, height: 90 })
        }
    }, [aspect])

    const handleSave = async () => {
        if (!imgRef.current || !completedCrop) return
        const img = imgRef.current

        // Hitung ukuran crop dalam pixel
        const scaleX = img.naturalWidth / img.width
        const scaleY = img.naturalHeight / img.height

        const pixelRatio = window.devicePixelRatio || 1
        const canvas = document.createElement('canvas')
        canvas.width = Math.floor(completedCrop.width * scaleX * pixelRatio)
        canvas.height = Math.floor(completedCrop.height * scaleY * pixelRatio)
        const ctx = canvas.getContext('2d')

        ctx.imageSmoothingQuality = 'high'
        ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0)

        ctx.drawImage(
            img,
            completedCrop.x * scaleX,
            completedCrop.y * scaleY,
            completedCrop.width * scaleX,
            completedCrop.height * scaleY,
            0, 0,
            completedCrop.width * scaleX,
            completedCrop.height * scaleY
        )

        const blob = await toCanvasBlob(canvas, 'image/jpeg', 0.92)
        onCropped && onCropped(blob)
    }

    return (
        <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
            <DialogTitle>Crop Gambar</DialogTitle>
            <DialogContent>
                <Box sx={{ position: 'relative', width: '100%', height: 460 }}>
                    {src && (
                        <ReactCrop
                            crop={crop}
                            onChange={(_, percentCrop) => setCrop(percentCrop)}
                            onComplete={(_, pc) => setCompletedCrop(pc)}
                            aspect={aspect || undefined}
                            keepSelection
                            ruleOfThirds
                        >
                            {/* zoom sederhana: pakai CSS scale pada img */}
                            <img
                                ref={imgRef}
                                src={src}
                                alt="to-crop"
                                onLoad={onImageLoad}
                                style={{
                                    transform: `scale(${zoom})`,
                                    transformOrigin: 'center center',
                                    maxHeight: '100%',
                                }}
                                crossOrigin="anonymous"
                            />
                        </ReactCrop>
                    )}
                </Box>

                <Stack direction="row" alignItems="center" spacing={2} sx={{ mt: 2 }}>
                    <span>Zoom</span>
                    <Slider min={1} max={3} step={0.01} value={zoom} onChange={(_, v) => setZoom(v)} />
                </Stack>

                <ToggleButtonGroup
                    exclusive
                    size="small"
                    value={aspect}
                    onChange={(_, v) => v !== null && setAspect(v)}
                    sx={{ mt: 1, flexWrap: 'wrap' }}
                >
                    {PRESETS.map(p => (
                        <ToggleButton key={p.key} value={p.value}>{p.label}</ToggleButton>
                    ))}
                </ToggleButtonGroup>
            </DialogContent>
            <DialogActions>
                <Button onClick={onClose}>Batal</Button>
                <Button variant="contained" onClick={handleSave}>Simpan</Button>
            </DialogActions>
        </Dialog>
    )
}

--- END FILE: portofolio/frontend-portofolio/src/components/admin/ImageCropper.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/admin/ProjectForm.jsx ---
// src/components/admin/ProjectForm.jsx
import {
    Paper, Stack, TextField, MenuItem, Typography, Button, Divider,
    Box, Card, CardMedia, IconButton, Tooltip, FormControlLabel, Switch
} from '@mui/material'
import { useFormik } from 'formik'
import * as Yup from 'yup'
import { useMemo, useState, useEffect } from 'react'
import Swal from 'sweetalert2'
import withReactContent from 'sweetalert2-react-content'
import DropzoneUpload from './DropzoneUpload'
import ProjectPreview from './ProjectPreview'
import GalleryManager from './GalleryManager'
import ImageCropper from './ImageCropper'
import { api } from '../../api/client'
import CropIcon from '@mui/icons-material/Crop'
import ClearIcon from '@mui/icons-material/Clear'
import { fileUrl } from '../../utils/url'

const MySwal = withReactContent(Swal)

const slugify = (s = '') =>
    s
        .toString()
        .normalize('NFKD')
        .replace(/[\u0300-\u036f]/g, '')
        .toLowerCase()
        .trim()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/^-+|-+$/g, '')
        .slice(0, 160)

const schema = Yup.object({
    slug: Yup.string().required('Slug wajib diisi').matches(/^[a-z0-9-]+$/, 'Gunakan huruf kecil, angka, dan strip (-)'),
    title: Yup.string().required('Judul wajib diisi').max(220),
    summary: Yup.string().required('Ringkasan wajib diisi').max(1000, 'Maksimal 1000 karakter'),
    body: Yup.string(),
    cover_url: Yup.string().nullable().max(500),
    repo_url: Yup.string().nullable().max(500),
    demo_url: Yup.string().nullable().max(500),
    role: Yup.string().nullable(),
    status: Yup.string().required(),
    tech_stack: Yup.string().nullable(),
})

export default function ProjectForm({ initial = {}, onSubmit, onCancel }) {
    const init = useMemo(() => ({
        slug: initial.slug || '',
        title: initial.title || '',
        summary: initial.summary || '',
        body: initial.body || '',
        cover_url: initial.cover_url || '',
        repo_url: initial.repo_url || '',
        demo_url: initial.demo_url || '',
        role: initial.role || '',
        status: initial.status || 'published',
        is_featured: initial.is_featured || false,
        gallery: Array.isArray(initial.gallery) ? initial.gallery : [],
        tech_stack: initial.tech_stack || '',
    }), [initial])

    const [previewOpen, setPreviewOpen] = useState(false)
    const [gallery, setGallery] = useState(init.gallery)
    const [cropOpen, setCropOpen] = useState(false)
    const [coverSrc, setCoverSrc] = useState(init.cover_url || '')

    useEffect(() => {
        setGallery(Array.isArray(initial.gallery) ? initial.gallery : [])
        setCoverSrc(initial.cover_url || '')
    }, [initial])

    const formik = useFormik({
        initialValues: init,
        enableReinitialize: true,
        validationSchema: schema,
        onSubmit: async (values) => {
            const res = await MySwal.fire({
                title: initial.id ? 'Update project?' : 'Simpan project baru?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Ya',
                cancelButtonText: 'Batal',
            })
            if (res.isConfirmed) {
                await onSubmit({ ...values, gallery })
            }
        },
    })

    const { values, errors, touched, handleChange, handleSubmit, setFieldValue } = formik

    const uploadBlob = async (blob) => {
        const fd = new FormData()
        fd.append('file', blob, 'crop.jpg')
        const { data } = await api.post('/api/admin/upload', fd, { headers: { 'Content-Type': 'multipart/form-data' } })
        return data?.url
    }

    const handleTitleChange = (e) => {
        const v = e.target.value
        handleChange(e)
        if (!initial.id) {
            const currentSlug = formik.values.slug || ''
            if (!currentSlug || currentSlug === slugify(currentSlug)) {
                setFieldValue('slug', slugify(v))
            }
        }
    }

    const handleSlugBlur = () => {
        if (values.slug) setFieldValue('slug', slugify(values.slug))
    }

    return (
        <Paper sx={{ p: 3, mt: 4 }}>
            <Typography variant="h6" gutterBottom>{initial.id ? 'Edit Project' : 'New Project'}</Typography>
            <form onSubmit={handleSubmit}>
                <Stack spacing={2}>
                    <TextField name="slug" label="Slug (unik untuk URL)" value={values.slug} onChange={handleChange} onBlur={handleSlugBlur} error={touched.slug && Boolean(errors.slug)} helperText={touched.slug && errors.slug} />
                    <TextField name="title" label="Judul Project" value={values.title} onChange={handleTitleChange} error={touched.title && Boolean(errors.title)} helperText={touched.title && errors.title} />
                    <TextField name="summary" label="Ringkasan (untuk card)" value={values.summary} onChange={handleChange} error={touched.summary && Boolean(errors.summary)} helperText={touched.summary && errors.summary} multiline minRows={2} />

                    <TextField name="tech_stack" label="Tech Stack (pisahkan dengan koma)" value={values.tech_stack} onChange={handleChange} helperText="Contoh: React, Go, PostgreSQL, Docker" />

                    <TextField name="body" label="Deskripsi Lengkap (Markdown didukung)" value={values.body} onChange={handleChange} multiline rows={10} />

                    <DropzoneUpload key={`dz-cover-${initial.id || 'new'}`} label="Sampul (thumbnail)" multiple={false} onUploaded={(url) => { setFieldValue('cover_url', url); setCoverSrc(url) }} />
                    <TextField name="cover_url" label="Sampul (URL)" value={values.cover_url} onChange={(e) => { handleChange(e); setCoverSrc(e.target.value) }} />

                    {values.cover_url ? (
                        <Card sx={{ maxWidth: 360, position: 'relative', mt: 1 }}>
                            <CardMedia component="img" image={fileUrl(values.cover_url)} alt="Sampul" />
                            <Tooltip title="Crop Sampul"><IconButton size="small" sx={{ position: 'absolute', top: 8, right: 44, bgcolor: 'rgba(0,0,0,.5)', color: 'white' }} onClick={() => setCropOpen(true)}><CropIcon fontSize="small" /></IconButton></Tooltip>
                            <Tooltip title="Hapus Sampul"><IconButton size="small" sx={{ position: 'absolute', top: 8, right: 8, bgcolor: 'rgba(0,0,0,.5)', color: 'white' }} onClick={() => { setFieldValue('cover_url', ''); setCoverSrc('') }}><ClearIcon fontSize="small" /></IconButton></Tooltip>
                        </Card>
                    ) : null}

                    <TextField name="repo_url" label="Repo URL (opsional)" value={values.repo_url} onChange={handleChange} />
                    <TextField name="demo_url" label="Demo URL (opsional)" value={values.demo_url} onChange={handleChange} />

                    <TextField name="role" select label="Peran (opsional)" value={values.role} onChange={handleChange}>
                        <MenuItem value="">(Tidak di-set)</MenuItem>
                        <MenuItem value="Frontend">Frontend</MenuItem>
                        <MenuItem value="Backend">Backend</MenuItem>
                        <MenuItem value="Fullstack">Fullstack</MenuItem>
                        <MenuItem value="Other">Other</MenuItem>
                    </TextField>

                    <TextField name="status" select label="Status Publikasi" value={values.status} onChange={handleChange}>
                        <MenuItem value="published">Published</MenuItem>
                        <MenuItem value="draft">Draft</MenuItem>
                    </TextField>

                    <FormControlLabel control={<Switch checked={values.is_featured} onChange={handleChange} name="is_featured" />} label="Tandai sebagai Proyek Unggulan" />

                    <Divider sx={{ my: 1 }} />
                    <Typography variant="subtitle1">Galeri (opsional)</Typography>
                    <DropzoneUpload key={`dz-gallery-${initial.id || 'new'}`} label="Tambah Gambar Galeri" multiple onUploaded={(urls) => { const arr = Array.isArray(urls) ? urls : [urls]; setGallery((prev) => [...prev, ...arr]) }} />
                    <Box sx={{ mt: 1 }}><GalleryManager key={`gm-${initial.id || 'new'}`} items={gallery} onChange={setGallery} /></Box>

                    <Stack direction="row" spacing={2} justifyContent="flex-end">
                        <Button variant="text" onClick={() => setPreviewOpen(true)}>Preview</Button>
                        <Button variant="outlined" onClick={onCancel}>Batal</Button>
                        <Button variant="contained" type="submit">Simpan</Button>
                    </Stack>
                </Stack>
            </form>

            <ProjectPreview open={previewOpen} onClose={() => setPreviewOpen(false)} project={{ ...values, gallery }} />
            <ImageCropper open={cropOpen} src={coverSrc} aspect={16 / 9} onClose={() => setCropOpen(false)} onCropped={async (blob) => { const url = await uploadBlob(blob); setFieldValue('cover_url', url); setCoverSrc(url); setCropOpen(false) }} />
        </Paper>
    )
}
--- END FILE: portofolio/frontend-portofolio/src/components/admin/ProjectForm.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/admin/ProjectPreview.jsx ---
//src/components/admin/ProjectPreview.jsx
import { Dialog, DialogTitle, DialogContent, Typography, Chip, Stack, Box, Divider, Button } from '@mui/material'
import { marked } from 'marked'
import { fileUrl } from '../../utils/url'

export default function ProjectPreview({ open, onClose, project }) {
    if (!project) return null

    const repo = project.repo_url
    const demo = project.demo_url
    const gallery = Array.isArray(project.gallery) ? project.gallery : []

    return (
        <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
            <DialogTitle>
                {project.title || '(Tanpa judul)'}
                <Stack direction="row" spacing={1} sx={{ mt: 1 }}>
                    {project.role && <Chip size="small" label={project.role} color="info" />}
                    <Chip
                        size="small"
                        label={project.status || 'draft'}
                        color={(project.status === 'published') ? 'success' : 'default'}
                        variant="outlined"
                    />
                </Stack>
            </DialogTitle>
            <DialogContent dividers>
                {project.cover_url && (
                    <Box
                        component="img"
                        src={fileUrl(project.cover_url)}
                        alt="cover"
                        sx={{ width: '100%', borderRadius: 1, mb: 2 }}
                    />
                )}

                {project.summary && (
                    <Typography variant="subtitle1" sx={{ mb: 2 }}>
                        {project.summary}
                    </Typography>
                )}

                {(repo || demo) && (
                    <Stack direction="row" spacing={1} sx={{ mb: 2 }}>
                        {repo && <Button variant="outlined" href={repo} target="_blank" rel="noreferrer">Repository</Button>}
                        {demo && <Button variant="contained" href={demo} target="_blank" rel="noreferrer">Live Demo</Button>}
                    </Stack>
                )}

                {project.body && (
                    <Box
                        sx={{
                            '& h1,& h2,& h3': { mt: 2, mb: 1 },
                            '& p': { mb: 1.5 },
                            '& a': { textDecoration: 'underline' },
                            '& img': { maxWidth: '100%', borderRadius: 1 }
                        }}
                        dangerouslySetInnerHTML={{ __html: marked(project.body) }}
                    />
                )}

                {gallery.length > 0 && (
                    <>
                        <Divider sx={{ my: 2 }} />
                        <Typography variant="subtitle1" sx={{ mb: 1 }}>Galeri</Typography>
                        <Stack direction="row" gap={2} flexWrap="wrap">
                            {gallery.map((url, i) => (
                                <Box key={i} component="img" src={fileUrl(url)} alt={`gal-${i}`} sx={{ width: 180, borderRadius: 1 }} />
                            ))}
                        </Stack>
                    </>
                )}
            </DialogContent>
        </Dialog>
    )
}

--- END FILE: portofolio/frontend-portofolio/src/components/admin/ProjectPreview.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/admin/SkillFormModal.jsx ---
// src/components/admin/SkillFormModal.jsx
import {
    Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, Stack
} from '@mui/material'
import { useFormik } from 'formik'
import * as Yup from 'yup'
import { useEffect } from 'react'

const validationSchema = Yup.object({
    name: Yup.string().required('Nama skill wajib diisi'),
    group: Yup.string().required('Grup wajib diisi (cth: Frontend, Backend, Tools)'),
})

export default function SkillFormModal({ open, onClose, onSubmit, initialData = null }) {
    const formik = useFormik({
        initialValues: {
            name: '',
            group: '',
        },
        validationSchema,
        onSubmit: (values, { setSubmitting }) => {
            onSubmit(values)
            setSubmitting(false)
        },
    })

    useEffect(() => {
        if (open) {
            formik.resetForm()
            if (initialData) {
                formik.setValues({
                    name: initialData.name || '',
                    group: initialData.group || '',
                }, false)
            }
        }
    }, [open, initialData]) // eslint-disable-line

    return (
        <Dialog open={open} onClose={onClose} fullWidth maxWidth="xs">
            <form onSubmit={formik.handleSubmit}>
                <DialogTitle fontWeight={700}>
                    {initialData ? 'Edit Skill' : 'Tambah Skill Baru'}
                </DialogTitle>
                <DialogContent>
                    <Stack spacing={2} sx={{ pt: 1 }}>
                        <TextField
                            name="name"
                            label="Nama Skill"
                            value={formik.values.name}
                            onChange={formik.handleChange}
                            error={formik.touched.name && Boolean(formik.errors.name)}
                            helperText={formik.touched.name && formik.errors.name}
                        />
                        <TextField
                            name="group"
                            label="Grup"
                            value={formik.values.group}
                            onChange={formik.handleChange}
                            error={formik.touched.group && Boolean(formik.errors.group)}
                            helperText={formik.touched.group && formik.errors.group}
                        />
                    </Stack>
                </DialogContent>
                <DialogActions>
                    <Button onClick={onClose}>Batal</Button>
                    <Button type="submit" variant="contained" disabled={formik.isSubmitting}>
                        Simpan
                    </Button>
                </DialogActions>
            </form>
        </Dialog>
    )
}
--- END FILE: portofolio/frontend-portofolio/src/components/admin/SkillFormModal.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/admin/SkillGroupOrderManager.jsx ---
// src/components/admin/SkillGroupOrderManager.jsx
import { useState, useRef, useEffect } from 'react';
import { Box, Paper, Stack, Typography } from '@mui/material';
import DragIndicatorIcon from '@mui/icons-material/DragIndicator';

export default function SkillGroupOrderManager({ availableGroups = [], currentOrder = [], onOrderChange }) {
    const [orderedGroups, setOrderedGroups] = useState([]);
    const [dragIdx, setDragIdx] = useState(null);
    const dragIndexRef = useRef(null);

    useEffect(() => {
        const current = Array.isArray(currentOrder) ? currentOrder : [];
        const existing = current.filter(group => availableGroups.includes(group));
        const newGroups = availableGroups.filter(group => !existing.includes(group));
        const finalOrder = [...existing, ...newGroups];
        setOrderedGroups(finalOrder);
    }, [availableGroups, currentOrder]);

    const handleDragStart = (e, index) => {
        dragIndexRef.current = index;
        setDragIdx(index);
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/html', null);
    };

    const handleDragOver = (e) => e.preventDefault();

    const handleDrop = (e, toIndex) => {
        e.preventDefault();
        const fromIndex = dragIndexRef.current;
        setDragIdx(null);
        dragIndexRef.current = null;
        if (fromIndex === null || fromIndex === toIndex) return;

        const nextOrder = [...orderedGroups];
        const [movedItem] = nextOrder.splice(fromIndex, 1);
        nextOrder.splice(toIndex, 0, movedItem);
        setOrderedGroups(nextOrder);
        onOrderChange(nextOrder);
    };

    return (
        <Stack spacing={2}>
            <Typography variant="subtitle1" fontWeight={600}>Urutan Grup Keahlian</Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mt: -1 }}>
                Seret untuk mengubah urutan tampilan di halaman publik.
            </Typography>
            <Stack spacing={1}>
                {orderedGroups.map((group, i) => (
                    <Paper
                        key={group}
                        draggable
                        onDragStart={(e) => handleDragStart(e, i)}
                        onDragOver={handleDragOver}
                        onDrop={(e) => handleDrop(e, i)}
                        sx={{
                            p: 1.5, display: 'flex', alignItems: 'center', gap: 1, cursor: 'grab',
                            opacity: dragIdx === i ? 0.5 : 1,
                            border: '1px solid', borderColor: 'divider',
                        }}
                    >
                        <DragIndicatorIcon sx={{ color: 'text.secondary' }} />
                        <Typography>{group}</Typography>
                    </Paper>
                ))}
            </Stack>
        </Stack>
    );
}
--- END FILE: portofolio/frontend-portofolio/src/components/admin/SkillGroupOrderManager.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/admin/SocialLinksManager.jsx ---
// src/components/admin/SocialLinksManager.jsx
import {
    Box, Stack, TextField, Switch, FormControlLabel, IconButton, Button, Typography, Paper
} from '@mui/material'
// eslint-disable-next-line no-unused-vars
import { motion, AnimatePresence } from 'framer-motion'
import AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline'
import DeleteIcon from '@mui/icons-material/Delete'

export default function SocialLinksManager({ links = [], onChange }) {
    const updateLink = (index, field, value) => {
        const newLinks = [...links]
        newLinks[index] = { ...newLinks[index], [field]: value }
        onChange(newLinks)
    }

    const addLink = () => {
        const newLinks = [...links, { name: '', url: '', icon: '', active: true }]
        onChange(newLinks)
    }

    const removeLink = (index) => {
        const newLinks = links.filter((_, i) => i !== index)
        onChange(newLinks)
    }

    return (
        <Stack spacing={2}>
            <Typography variant="subtitle1" fontWeight={600}>Tautan Sosial</Typography>
            <AnimatePresence>
                {links.map((link, i) => (
                    <motion.div
                        key={i}
                        initial={{ opacity: 0, y: -20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, x: -30, transition: { duration: 0.2 } }}
                    >
                        <Paper variant="outlined" sx={{ p: 2 }}>
                            <Stack spacing={2}>
                                <Stack direction="row" spacing={2}>
                                    <TextField
                                        size="small"
                                        label="Nama"
                                        value={link.name}
                                        onChange={(e) => updateLink(i, 'name', e.target.value)}
                                        fullWidth
                                    />
                                    <TextField
                                        size="small"
                                        label="Icon (opsional)"
                                        value={link.icon}
                                        onChange={(e) => updateLink(i, 'icon', e.target.value)}
                                    />
                                </Stack>
                                <TextField
                                    size="small"
                                    label="URL"
                                    value={link.url}
                                    onChange={(e) => updateLink(i, 'url', e.target.value)}
                                />
                                <Stack direction="row" justifyContent="space-between" alignItems="center">
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={link.active}
                                                onChange={(e) => updateLink(i, 'active', e.target.checked)}
                                            />
                                        }
                                        label="Aktif (tampil di publik)"
                                    />
                                    <IconButton color="error" onClick={() => removeLink(i)}>
                                        <DeleteIcon />
                                    </IconButton>
                                </Stack>
                            </Stack>
                        </Paper>
                    </motion.div>
                ))}
            </AnimatePresence>
            <Box>
                <Button startIcon={<AddCircleOutlineIcon />} onClick={addLink}>
                    Tambah Tautan
                </Button>
            </Box>
        </Stack>
    )
}
--- END FILE: portofolio/frontend-portofolio/src/components/admin/SocialLinksManager.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/admin/UploadButton.jsx ---
//src/components/admin/UploadButton.jsx
import { useRef, useState } from 'react'
import { Box, Button, Stack, Typography } from '@mui/material'
import { api } from '../../api/client'

export default function UploadButton({ label = 'Unggah', multiple = false, onUploaded }) {
    const inputRef = useRef(null)
    const [busy, setBusy] = useState(false)

    const onPick = () => inputRef.current?.click()

    const handleChange = async (e) => {
        const files = Array.from(e.target.files || [])
        if (!files.length) return
        setBusy(true)
        try {
            const urls = []
            for (const f of files) {
                const fd = new FormData()
                fd.append('file', f)
                const { data } = await api.post('/api/admin/upload', fd, {
                    headers: { 'Content-Type': 'multipart/form-data' },
                })
                urls.push(data?.url)
            }
            onUploaded?.(multiple ? urls : urls[0])
        } finally {
            setBusy(false)
            e.target.value = ''
        }
    }

    return (
        <Stack direction="row" spacing={1} alignItems="center">
            <input ref={inputRef} type="file" accept="image/*" hidden multiple={multiple} onChange={handleChange} />
            <Button variant="outlined" onClick={onPick} disabled={busy}>
                {busy ? 'Mengunggah…' : label}
            </Button>
            <Typography variant="caption" color="text.secondary">PNG/JPG, maksimal beberapa MB</Typography>
        </Stack>
    )
}

--- END FILE: portofolio/frontend-portofolio/src/components/admin/UploadButton.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/common/ThemeToggle.jsx ---
//src/components/common/ThemeToggle.jsx
import { IconButton, Tooltip } from '@mui/material'
import DarkModeIcon from '@mui/icons-material/DarkMode'
import LightModeIcon from '@mui/icons-material/LightMode'
import { useColorMode } from '../../providers/colorMode'

export default function ThemeToggle() {
    const { mode, toggle } = useColorMode()
    return (
        <Tooltip title={mode === 'dark' ? 'Switch to light' : 'Switch to dark'}>
            <IconButton onClick={toggle} color="primary">
                {mode === 'dark' ? <LightModeIcon /> : <DarkModeIcon />}
            </IconButton>
        </Tooltip>
    )
}

--- END FILE: portofolio/frontend-portofolio/src/components/common/ThemeToggle.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/layout/admin/AdminHeader.jsx ---
// src/components/layout/admin/AdminHeader.jsx
import { AppBar, Toolbar, Button, Box, Stack } from '@mui/material'
import { Link, useNavigate, useLocation } from 'react-router-dom'
import { useAuth } from '../../../auth/useAuth'
import { confirm } from '../../../utils/confirm'

const nav = [
    { to: '/admin', label: 'Dashboard' },
    { to: '/admin/projects', label: 'Projects' },
    { to: '/admin/profile', label: 'Profile' },
    { to: '/admin/skills', label: 'Skills' },
    { to: '/admin/experiences', label: 'Experiences' },
    { to: '/admin/achievements', label: 'Achievements' },
]

export default function AdminHeader() {
    const { logout } = useAuth()
    const navigate = useNavigate()
    const { pathname } = useLocation()

    const onLogout = async () => {
        const ok = await confirm({ title: 'Logout?', text: 'Anda yakin ingin keluar?', icon: 'warning', confirmText: 'Logout' })
        if (ok.isConfirmed) {
            logout()
            navigate('/admin/login', { replace: true })
        }
    }

    return (
        <AppBar position="sticky" color="inherit" sx={{ borderBottom: '1px solid', borderColor: 'divider' }}>
            <Toolbar sx={{ minHeight: 72 }}>
                <Box sx={{ flex: 1 }} />
                <Stack direction="row" spacing={1} flexWrap="wrap" justifyContent="flex-end">
                    {nav.map(n => (
                        <Button
                            key={n.to}
                            component={Link}
                            to={n.to}
                            variant={pathname === n.to ? 'contained' : 'text'}
                        >
                            {n.label}
                        </Button>
                    ))}
                    <Button color="error" onClick={onLogout}>Logout</Button>
                </Stack>
            </Toolbar>
        </AppBar>
    )
}
--- END FILE: portofolio/frontend-portofolio/src/components/layout/admin/AdminHeader.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/layout/admin/AdminLayout.jsx ---
//src/components/layout/admin/AdminLayout.jsx
import { Container, Box } from '@mui/material'
import AdminHeader from './AdminHeader'
import Footer from '../Footer'

export default function AdminLayout({ children }) {
    return (
        <Box display="flex" minHeight="100vh" flexDirection="column">
            <AdminHeader />
            <Container component="main" sx={{ flex: 1, py: 4 }}>
                {children}
            </Container>
            <Footer />
        </Box>
    )
}

--- END FILE: portofolio/frontend-portofolio/src/components/layout/admin/AdminLayout.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/layout/Footer.jsx ---
//src/components/layout/Footer.jsx
import { Box, Container, Typography, Stack, Link } from '@mui/material'

export default function Footer() {
    return (
        <Box className="app-footer" component="footer" sx={{ py: 3, mt: 'auto' }}>
            <Container maxWidth="lg">
                <Stack direction="row" justifyContent="center" spacing={1} sx={{ color: 'text.secondary' }}>
                    <Typography variant="body2">© {new Date().getFullYear()} Vico Triansyah Nasril ·</Typography>
                    <Link href="https://github.com/VicoTriansyahNasril" target="_blank" variant="body2">GitHub</Link>
                    <Typography variant="body2">·</Typography>
                    <Link href="https://www.linkedin.com" target="_blank" variant="body2">LinkedIn</Link>
                </Stack>
            </Container>
        </Box>
    )
}

--- END FILE: portofolio/frontend-portofolio/src/components/layout/Footer.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/layout/Header.jsx ---
// src/components/layout/Header.jsx
import { AppBar, Toolbar, Button, IconButton, Box } from '@mui/material'
import { Link, useLocation } from 'react-router-dom'
import Brightness4Icon from '@mui/icons-material/Brightness4'
import Brightness7Icon from '@mui/icons-material/Brightness7'

export default function Header({ mode, toggleMode }) {
    const location = useLocation()
    const isActive = (path) =>
        path === '/'
            ? location.pathname === '/'
            : location.pathname === path || location.pathname.startsWith(path + '/')

    return (
        <AppBar
            position="sticky"
            color="transparent"
            elevation={0}
            sx={{
                backdropFilter: 'blur(12px)',
                background: (t) =>
                    t.palette.mode === 'dark' ? 'rgba(13,17,28,.5)' : 'rgba(255,255,255,.7)',
                borderBottom: (t) => `1px solid ${t.palette.divider}`,
                zIndex: (t) => t.zIndex.drawer + 1,
            }}
        >
            <Toolbar sx={{ display: 'flex', justifyContent: 'flex-end' }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <Button
                        component={Link}
                        to="/"
                        sx={{
                            fontWeight: 600,
                            color: (t) => (isActive('/') ? t.palette.primary.main : t.palette.text.primary),
                            textTransform: 'none',
                        }}
                    >
                        Home
                    </Button>
                    <Button
                        component={Link}
                        to="/projects"
                        sx={{
                            fontWeight: 600,
                            color: (t) => (isActive('/projects') ? t.palette.primary.main : t.palette.text.primary),
                            textTransform: 'none',
                        }}
                    >
                        Projects
                    </Button>
                    <Button
                        component={Link}
                        to="/about"
                        sx={{
                            fontWeight: 600,
                            color: (t) => (isActive('/about') ? t.palette.primary.main : t.palette.text.primary),
                            textTransform: 'none',
                        }}
                    >
                        About
                    </Button>
                    <IconButton onClick={toggleMode}>
                        {mode === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}
                    </IconButton>
                </Box>
            </Toolbar>
        </AppBar>
    )
}
--- END FILE: portofolio/frontend-portofolio/src/components/layout/Header.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/public/ExperienceTimeline.jsx ---
/* eslint-disable no-unused-vars */
// src/components/public/ExperienceTimeline.jsx
import { Box, Typography, Stack, Chip } from '@mui/material';
import { motion } from 'framer-motion';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';
import SchoolIcon from '@mui/icons-material/School';
import GroupsIcon from '@mui/icons-material/Groups';

const itemVariants = {
    hidden: { opacity: 0, y: 50 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },
};

const formatDate = (dateStr) => {
    if (!dateStr) return '';
    return new Date(dateStr).toLocaleDateString('id-ID', { month: 'long', year: 'numeric' });
};

const getIcon = (type) => {
    if (type === 'Pendidikan') return <SchoolIcon />;
    if (type === 'Organisasi') return <GroupsIcon />;
    return <BusinessCenterIcon />;
};

export default function ExperienceTimeline({ experiences = [] }) {
    if (!experiences.length) return null;

    return (
        <Box sx={{ position: 'relative', '&::before': { content: '""', position: 'absolute', left: '19px', top: 0, bottom: 0, width: '2px', bgcolor: 'divider' } }}>
            {experiences.map((item, index) => (
                <motion.div
                    key={item.id || index}
                    variants={itemVariants}
                    initial="hidden"
                    whileInView="visible"
                    viewport={{ once: true, amount: 0.5 }}
                >
                    <Stack direction="row" spacing={3} sx={{ mb: 4, position: 'relative' }}>
                        <Box sx={{ zIndex: 1, flexShrink: 0, width: 40, height: 40, borderRadius: '50%', display: 'grid', placeItems: 'center', bgcolor: 'background.paper', border: '2px solid', borderColor: 'divider' }}>
                            {getIcon(item.type)}
                        </Box>
                        <Box>
                            <Typography variant="body2" color="primary.main" fontWeight={600}>
                                {formatDate(item.start_date)} - {item.end_date ? formatDate(item.end_date) : 'Sekarang'}
                            </Typography>

                            {/* ================================================================= */}
                            {/* PERUBAHAN UTAMA: Menampilkan Judul dengan Label Tipe            */}
                            {/* ================================================================= */}
                            <Stack direction="row" spacing={1.5} alignItems="center" sx={{ mb: 0.5 }}>
                                <Typography variant="h6" fontWeight={700}>{item.title}</Typography>
                                {(item.type === 'Magang' || item.type === 'Pekerjaan Penuh Waktu') && (
                                    <Chip label={item.type} color="primary" size="small" variant="outlined" />
                                )}
                            </Stack>

                            <Typography color="text.secondary" sx={{ mb: 1 }}>{item.entity_name} • {item.location}</Typography>
                            <Typography variant="body2" sx={{ whiteSpace: 'pre-wrap', color: 'text.secondary' }}>
                                {item.description}
                            </Typography>
                        </Box>
                    </Stack>
                </motion.div>
            ))}
        </Box>
    );
}
--- END FILE: portofolio/frontend-portofolio/src/components/public/ExperienceTimeline.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/public/Gallery.jsx ---
//src/components/public/Gallery.jsx
import { useState } from 'react'
import { Dialog, IconButton, ImageList, ImageListItem } from '@mui/material'
import CloseIcon from '@mui/icons-material/Close'
import { fileUrl } from '../../utils/url'

export default function Gallery({ images = [] }) {
    const [open, setOpen] = useState(false)
    const [active, setActive] = useState(null)

    return (
        <>
            <ImageList cols={3} gap={8} sx={{ m: 0 }}>
                {images.map((u) => (
                    <ImageListItem key={u} sx={{ borderRadius: 2, overflow: 'hidden', cursor: 'zoom-in' }}>
                        <img src={fileUrl(u)} alt="" loading="lazy" onClick={() => { setActive(u); setOpen(true) }} />
                    </ImageListItem>
                ))}
            </ImageList>

            <Dialog open={open} onClose={() => setOpen(false)} maxWidth="md" fullWidth>
                <IconButton onClick={() => setOpen(false)} sx={{ position: 'absolute', right: 8, top: 8, zIndex: 1 }}>
                    <CloseIcon />
                </IconButton>
                {active ? <img src={fileUrl(active)} alt="" style={{ width: '100%', display: 'block' }} /> : null}
            </Dialog>
        </>
    )
}

--- END FILE: portofolio/frontend-portofolio/src/components/public/Gallery.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/public/Lightbox.jsx ---
//src/components/public/Lightbox.jsx
import { useEffect, useMemo, useState } from 'react'
import { Box, Dialog, IconButton } from '@mui/material'
import CloseIcon from '@mui/icons-material/Close'
import ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew'
import ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos'

export default function Lightbox({ open, images = [], index = 0, onClose }) {
    const [i, setI] = useState(index)
    useEffect(() => { if (open) setI(index) }, [open, index])

    const has = useMemo(() => ({
        prev: i > 0,
        next: i < images.length - 1,
    }), [i, images.length])

    useEffect(() => {
        if (!open) return
        const onKey = (e) => {
            if (e.key === 'Escape') onClose?.()
            if (e.key === 'ArrowLeft' && has.prev) setI((v) => v - 1)
            if (e.key === 'ArrowRight' && has.next) setI((v) => v + 1)
        }
        window.addEventListener('keydown', onKey)
        return () => window.removeEventListener('keydown', onKey)
    }, [open, has, onClose])

    return (
        <Dialog open={open} onClose={onClose} fullScreen PaperProps={{ sx: { bgcolor: 'rgba(0, 0, 0, 0.85)' } }}>
            <Box sx={{ position: 'fixed', top: 8, right: 8, zIndex: 2 }}>
                <IconButton onClick={onClose} sx={{ color: 'white' }}><CloseIcon /></IconButton>
            </Box>

            {has.prev && (
                <IconButton
                    onClick={() => setI(i - 1)}
                    sx={{ position: 'fixed', top: '50%', left: 8, transform: 'translateY(-50%)', color: 'white', zIndex: 2 }}
                >
                    <ArrowBackIosNewIcon />
                </IconButton>
            )}
            {has.next && (
                <IconButton
                    onClick={() => setI(i + 1)}
                    sx={{ position: 'fixed', top: '50%', right: 8, transform: 'translateY(-50%)', color: 'white', zIndex: 2 }}
                >
                    <ArrowForwardIosIcon />
                </IconButton>
            )}

            <Box sx={{ width: '100%', height: '100%', display: 'grid', placeItems: 'center', p: 4 }}>
                <img
                    src={images[i]}
                    alt={`img-${i}`}
                    style={{
                        maxWidth: '100%',
                        maxHeight: '100%',
                        width: 'auto',
                        height: 'auto',
                        objectFit: 'contain',
                        display: 'block'
                    }}
                />
            </Box>
        </Dialog>
    )
}
--- END FILE: portofolio/frontend-portofolio/src/components/public/Lightbox.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/public/ProfileHeader.jsx ---
// src/components/public/ProfileHeader.jsx
import { Avatar, Box, Button, Chip, Stack, Typography, Fade } from '@mui/material'
import LocationOnRoundedIcon from '@mui/icons-material/LocationOnRounded'
import FileDownloadRoundedIcon from '@mui/icons-material/FileDownloadRounded'
import LaunchRoundedIcon from '@mui/icons-material/LaunchRounded'
import { fileUrl } from '../../utils/url'

export default function ProfileHeader({ profile }) {
    if (!profile) return null
    return (
        <Fade in timeout={500}>
            <Box sx={{ p: { xs: 2, md: 4 }, borderRadius: 3, bgcolor: 'background.paper', boxShadow: 1 }}>
                <Stack
                    direction={{ xs: 'column', sm: 'row' }}
                    spacing={{ xs: 2, sm: 3 }}
                    alignItems="center"
                >
                    <Avatar
                        src={fileUrl(profile.photo_url)}
                        alt={profile.full_name}
                        sx={{
                            width: { xs: 80, sm: 96 },
                            height: { xs: 80, sm: 96 },
                            border: '3px solid',
                            borderColor: 'primary.main',
                        }}
                    />
                    <Stack spacing={1.5} sx={{ flex: 1, width: '100%', textAlign: { xs: 'center', sm: 'left' } }}>
                        <Typography variant="h5" fontWeight={800}>{profile.full_name}</Typography>
                        <Typography color="text.secondary">{profile.headline}</Typography>
                        <Stack
                            direction="row"
                            spacing={1}
                            useFlexGap
                            flexWrap="wrap"
                            justifyContent={{ xs: 'center', sm: 'flex-start' }}
                        >
                            {profile.location && (
                                <Chip
                                    size="small"
                                    icon={<LocationOnRoundedIcon />}
                                    label={profile.location}
                                    sx={{ fontWeight: 600 }}
                                />
                            )}
                            {(profile.socials || []).map((s) => (
                                <Chip
                                    key={s.id || s.url}
                                    size="small"
                                    clickable
                                    component="a"
                                    href={s.url}
                                    target="_blank"
                                    rel="noreferrer"
                                    label={s.name}
                                    onDelete={() => window.open(s.url, '_blank')}
                                    deleteIcon={<LaunchRoundedIcon />}
                                    sx={{ fontWeight: 600 }}
                                />
                            ))}
                        </Stack>
                    </Stack>
                    {profile.resume_url && (
                        <Button
                            variant="contained"
                            href={fileUrl(profile.resume_url)}
                            target="_blank"
                            startIcon={<FileDownloadRoundedIcon />}
                            sx={{ width: { xs: '100%', sm: 'auto' }, flexShrink: 0 }}
                        >
                            Unduh CV
                        </Button>
                    )}
                </Stack>
            </Box>
        </Fade>
    )
}
--- END FILE: portofolio/frontend-portofolio/src/components/public/ProfileHeader.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/public/ProjectBody.jsx ---
import MarkdownIt from 'markdown-it'
import DOMPurify from 'dompurify'

const md = new MarkdownIt({ linkify: true, breaks: true, html: false })

export default function ProjectBody({ body }) {
    const html = DOMPurify.sanitize(md.render(body || ''))
    return <div dangerouslySetInnerHTML={{ __html: html }} />
}

--- END FILE: portofolio/frontend-portofolio/src/components/public/ProjectBody.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/public/ProjectCard.jsx ---
//src/components/public/ProjectCard.jsx
import { Card, CardContent, CardMedia, Typography, Chip, Stack, Box } from '@mui/material'
import { Link } from 'react-router-dom'
import { motion } from 'framer-motion'
import { fileUrl } from '../../utils/url'

const MotionCard = motion(Card)

export default function ProjectCard({ project }) {
    const cover = project?.cover_url || ''
    const techStack = project?.tech_stack
        ? project.tech_stack.split(',').map(s => s.trim()).filter(Boolean)
        : []

    return (
        <MotionCard
            component={Link}
            to={`/projects/${project.slug}`}
            state={{ project }}
            whileHover={{ scale: 1.05, boxShadow: "0px 10px 25px rgba(0,0,0,0.25)" }}
            whileTap={{ scale: 0.98 }}
            initial={{ opacity: 0, y: 40 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            sx={{
                borderRadius: 4,
                overflow: 'hidden',
                textDecoration: 'none',
                display: 'flex',
                flexDirection: 'column',
                background: 'rgba(255,255,255,0.05)',
                backdropFilter: 'blur(10px)',
                height: '100%',
            }}
        >
            {cover && (
                <CardMedia
                    component="img"
                    image={fileUrl(cover)}
                    alt={project.title}
                    sx={{ height: 180, objectFit: 'cover' }}
                />
            )}
            <CardContent sx={{ flexGrow: 1 }}>
                <Typography variant="h6" fontWeight="bold" gutterBottom>
                    {project.title}
                </Typography>
                <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                    {project.summary}
                </Typography>
                <Stack direction="row" spacing={1} flexWrap="wrap">
                    {techStack.map((tech, idx) => (
                        <Chip key={idx} label={tech} size="small" variant="outlined" />
                    ))}
                </Stack>
            </CardContent>
        </MotionCard>
    )
}

--- END FILE: portofolio/frontend-portofolio/src/components/public/ProjectCard.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/public/SkillChips.jsx ---
// src/components/public/SkillChips.jsx
import { Box, Typography, Grid } from '@mui/material';
import { motion } from 'framer-motion';

const containerVariants = {
    hidden: {},
    visible: {
        transition: {
            staggerChildren: 0.1,
        },
    },
};

const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
};

function SkillGroup({ title, items }) {
    if (!items?.length) return null;

    return (
        <Box sx={{ mb: 4 }}>
            <Typography variant="h6" sx={{ fontWeight: 600, mb: 2, color: 'text.secondary', borderBottom: 1, borderColor: 'divider', pb: 1 }}>
                {title}
            </Typography>
            <Box
                component={motion.div}
                variants={containerVariants}
                initial="hidden"
                whileInView="visible"
                viewport={{ once: true, amount: 0.2 }}
            >
                <Grid container spacing={2}>
                    {items.map((skill) => (
                        <Grid xs={6} sm={4} md={3} key={skill.id || skill.name}>
                            <motion.div variants={itemVariants}>
                                <Typography sx={{ fontSize: '1.1rem' }}>
                                    {skill.name}
                                </Typography>
                            </motion.div>
                        </Grid>
                    ))}
                </Grid>
            </Box>
        </Box>
    );
}

export default function SkillChips({ skills = [], groupOrder = [] }) {
    const grouped = skills.reduce((acc, s) => {
        const g = s.group || 'Lainnya';
        acc[g] = acc[g] || [];
        acc[g].push(s);
        return acc;
    }, {});

    const orderedGroups = groupOrder.filter(group => grouped[group]);
    const remainingGroups = Object.keys(grouped).filter(group => !orderedGroups.includes(group));
    const finalGroupOrder = [...orderedGroups, ...remainingGroups];

    return (
        <Box>
            {finalGroupOrder.map((key) => (
                <SkillGroup key={key} title={key} items={grouped[key]} />
            ))}
        </Box>
    );
}
--- END FILE: portofolio/frontend-portofolio/src/components/public/SkillChips.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/ui/AnimatedBackground.jsx ---
//src/components/ui/AnimatedBackground.jsx
import { useEffect, useRef } from 'react'
import { useTheme } from '@mui/material/styles'

export default function AnimatedBackground() {
    const theme = useTheme()
    const canvasRef = useRef(null)
    const rafRef = useRef(0)

    useEffect(() => {
        const c = canvasRef.current
        const ctx = c.getContext('2d')
        let w = (c.width = window.innerWidth)
        let h = (c.height = window.innerHeight)

        const onResize = () => {
            w = c.width = window.innerWidth
            h = c.height = window.innerHeight
        }
        window.addEventListener('resize', onResize)

        const isDark = theme.palette.mode === 'dark'
        let t = 0

        const draw = () => {
            ctx.clearRect(0, 0, w, h)

            if (isDark) {
                const gradient = ctx.createLinearGradient(0, 0, 0, h);
                gradient.addColorStop(0, '#0B1020');
                gradient.addColorStop(1, '#11162A');
                ctx.fillStyle = gradient;
                ctx.fillRect(0, 0, w, h);

                const bands = [
                    { hue: 280, alpha: 0.15, speed: 0.0008, amp: 100, baseY: h * 0.3 },
                    { hue: 220, alpha: 0.2, speed: 0.001, amp: 120, baseY: h * 0.5 },
                    { hue: 190, alpha: 0.1, speed: 0.0006, amp: 80, baseY: h * 0.7 },
                ];

                for (const band of bands) {
                    ctx.fillStyle = `hsla(${band.hue}, 70%, 60%, ${band.alpha})`
                    ctx.beginPath()
                    ctx.moveTo(0, h)
                    for (let x = 0; x <= w; x += 20) {
                        const y = band.baseY + Math.sin((x + t * 50 * band.speed) * 0.01) * band.amp + Math.cos((x * 0.005) - t * band.speed * 2) * band.amp * 0.5;
                        ctx.lineTo(x, y)
                    }
                    ctx.lineTo(w, h)
                    ctx.closePath()
                    ctx.fill()
                }

            } else {
                const gradient = ctx.createLinearGradient(0, 0, w, h)
                gradient.addColorStop(0, '#F0F4F8');
                gradient.addColorStop(1, '#DDE3EA');
                ctx.fillStyle = gradient
                ctx.fillRect(0, 0, w, h)

                const bands = [
                    { hue: 260, alpha: 0.2, speed: 0.001, amp: 40, baseY: h * 0.3 },
                    { hue: 320, alpha: 0.15, speed: 0.0008, amp: 50, baseY: h * 0.5 },
                    { hue: 210, alpha: 0.2, speed: 0.0012, amp: 35, baseY: h * 0.7 },
                ];

                for (const band of bands) {
                    ctx.fillStyle = `hsla(${band.hue}, 80%, 80%, ${band.alpha})`
                    ctx.beginPath()
                    ctx.moveTo(-100, h + 100)
                    for (let x = -100; x <= w + 100; x += 20) {
                        const y = band.baseY + Math.sin((x + t * 50 * band.speed) * 0.01) * band.amp + Math.cos((x * 0.002) - t * band.speed) * band.amp * 0.3;
                        ctx.lineTo(x, y)
                    }
                    ctx.lineTo(w + 100, h + 100)
                    ctx.closePath()
                    ctx.fill()
                }
            }

            t += 1
            rafRef.current = requestAnimationFrame(draw)
        }

        draw()
        return () => {
            cancelAnimationFrame(rafRef.current)
            window.removeEventListener('resize', onResize)
        }
    }, [theme.palette.mode])

    return (
        <canvas
            ref={canvasRef}
            style={{
                position: 'fixed',
                inset: 0,
                zIndex: -1,
                pointerEvents: 'none',
            }}
        />
    )
}
--- END FILE: portofolio/frontend-portofolio/src/components/ui/AnimatedBackground.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/components/ui/Interactive3D.jsx ---
// src/components/ui/Interactive3D.jsx
import { Suspense, useEffect, useRef } from 'react'
import { Canvas } from '@react-three/fiber'
import { useGLTF, Environment, Stars, OrbitControls } from '@react-three/drei'
import { Box, useTheme } from '@mui/material'

function Model(props) {
    const { scene } = useGLTF('/models/vico_setup_it.glb')
    return <primitive object={scene} {...props} />
}

function Scene() {
    const theme = useTheme()

    return (
        <>
            <Stars radius={80} depth={50} count={5000} factor={5} saturation={0} fade speed={1.5} />
            <Environment preset="city" />

            <ambientLight intensity={0.5} />
            <pointLight position={[10, 10, 15]} intensity={1.8} color={theme.palette.primary.main} />
            <pointLight position={[-15, -8, 5]} intensity={1.2} color={theme.palette.secondary.main} />
            <directionalLight position={[0, -10, 0]} intensity={0.5} />

            <Suspense fallback={null}>
                <group rotation-y={-1.5}>
                    <Model scale={1.5} position={[0, -1, 0]} />
                </group>
            </Suspense>

            <OrbitControls
                autoRotate
                autoRotateSpeed={0.5}
                enableZoom={false}
                enablePan={false}
                minPolarAngle={Math.PI / 3}
                maxPolarAngle={Math.PI / 1.8}
            />
        </>
    )
}

function LightParticlesCanvas() {
    const theme = useTheme()
    const ref = useRef(null)
    const rafRef = useRef(0)

    useEffect(() => {
        if (theme.palette.mode !== 'light') return

        const c = ref.current
        const ctx = c.getContext('2d', { alpha: true })
        const dpr = Math.max(1, window.devicePixelRatio || 1)

        const parent = c.parentElement
        const getSize = () => {
            const r = parent.getBoundingClientRect()
            return { w: Math.max(1, r.width), h: Math.max(1, r.height) }
        }

        let { w, h } = getSize()
        const fit = () => {
            const s = getSize()
            w = s.w; h = s.h
            c.width = Math.floor(w * dpr)
            c.height = Math.floor(h * dpr)
            c.style.width = `${w}px`
            c.style.height = `${h}px`
            ctx.setTransform(1, 0, 0, 1, 0, 0)
            ctx.scale(dpr, dpr)
        }
        fit()
        const ro = new ResizeObserver(fit)
        ro.observe(parent)

        const COUNT = Math.min(90, Math.floor((w * h) / 26000))
        const parts = Array.from({ length: COUNT }, () => ({
            x: Math.random() * w,
            y: Math.random() * h,
            vx: (Math.random() - 0.5) * 0.22,
            vy: (Math.random() - 0.5) * 0.22,
            r: 0.8 + Math.random() * 1.4,
        }))
        const mouse = { x: -9999, y: -9999 }
        const onMove = (e) => {
            const r = c.getBoundingClientRect()
            mouse.x = e.clientX - r.left
            mouse.y = e.clientY - r.top
        }
        const onLeave = () => { mouse.x = -9999; mouse.y = -9999 }

        const linkDist = 110
        const dotColor = 'rgba(20,20,20,0.45)'
        const lineBase = 0.12

        const draw = () => {
            ctx.clearRect(0, 0, w, h)

            for (let i = 0; i < 120; i++) {
                const x = (i * 97) % w
                const y = (i * 53) % h
                const r = (i % 3) * 0.3 + 0.2
                ctx.beginPath()
                ctx.arc(x, y, r, 0, Math.PI * 2)
                ctx.fillStyle = 'rgba(0,0,0,0.06)'
                ctx.fill()
            }

            for (const p of parts) {
                p.x += p.vx; p.y += p.vy
                if (p.x < 0 || p.x > w) p.vx *= -1
                if (p.y < 0 || p.y > h) p.vy *= -1

                const dx = mouse.x - p.x, dy = mouse.y - p.y
                const d2 = dx * dx + dy * dy
                if (d2 < 150 * 150) {
                    const inv = 1 / Math.sqrt(d2 + 0.0001)
                    p.vx += dx * inv * 0.0006
                    p.vy += dy * inv * 0.0006
                }

                ctx.beginPath()
                ctx.arc(p.x, p.y, p.r, 0, Math.PI * 2)
                ctx.fillStyle = dotColor
                ctx.fill()
            }

            ctx.lineWidth = 0.6
            for (let i = 0; i < parts.length; i++) {
                for (let j = i + 1; j < parts.length; j++) {
                    const a = parts[i], b = parts[j]
                    const dx = a.x - b.x, dy = a.y - b.y
                    const d = Math.hypot(dx, dy)
                    if (d < linkDist) {
                        const alpha = lineBase * (1 - d / linkDist)
                        ctx.strokeStyle = `rgba(0,0,0,${alpha})`
                        ctx.beginPath()
                        ctx.moveTo(a.x, a.y)
                        ctx.lineTo(b.x, b.y)
                        ctx.stroke()
                    }
                }
            }

            rafRef.current = requestAnimationFrame(draw)
        }

        c.addEventListener('mousemove', onMove)
        c.addEventListener('mouseleave', onLeave)
        rafRef.current = requestAnimationFrame(draw)

        return () => {
            cancelAnimationFrame(rafRef.current)
            ro.disconnect()
            c.removeEventListener('mousemove', onMove)
            c.removeEventListener('mouseleave', onLeave)
        }
    }, [theme.palette.mode])

    if (theme.palette.mode !== 'light') return null

    return (
        <canvas
            ref={ref}
            style={{
                position: 'absolute',
                inset: 0,
                width: '100%',
                height: '100%',
                display: 'block',
                pointerEvents: 'none',
                zIndex: 0
            }}
        />
    )
}

export default function Interactive3D() {
    const theme = useTheme()

    return (
        <Box
            sx={{
                position: 'absolute',
                inset: 0,
                zIndex: 0,
                cursor: 'grab',
                '&:active': { cursor: 'grabbing' },
            }}
        >

            {theme.palette.mode === 'light' && (
                <Box sx={{ position: 'absolute', inset: 0, zIndex: 0 }}>
                    <LightParticlesCanvas />
                </Box>
            )}

            <Canvas
                camera={{ position: [0, 2, 30], fov: 45 }}
                gl={{ antialias: true, powerPreference: 'high-performance' }}
                dpr={[1, 2]}
                style={{ position: 'absolute', inset: 0, zIndex: 1 }}
            >
                <Scene />
            </Canvas>
        </Box>
    )
}

--- END FILE: portofolio/frontend-portofolio/src/components/ui/Interactive3D.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/index.css ---
/* src/index.css */
@keyframes gradientShift {
    0% {
        background-position: 0% 50%;
    }

    50% {
        background-position: 100% 50%;
    }

    100% {
        background-position: 0% 50%;
    }
}

body {
    margin: 0;
    padding: 0;
    min-height: 100vh;
    background: linear-gradient(-45deg, #0B1020, #11162A, #1e2136, #151623);
    background-size: 400% 400%;
    animation: gradientShift 20s ease infinite;
    color: #E8ECF5;
    font-family: 'Inter', system-ui, Segoe UI, Roboto, Arial, sans-serif;
}
--- END FILE: portofolio/frontend-portofolio/src/index.css ---

--- START FILE: portofolio/frontend-portofolio/src/main.jsx ---
//src/main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import { ThemeProvider, CssBaseline, GlobalStyles } from '@mui/material'
import App from './App.jsx'
import { getTheme } from './theme.js'
import AuthProvider from './auth/AuthProvider.jsx'

const mode = localStorage.getItem('themeMode') || 'dark'
const theme = getTheme(mode)

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <GlobalStyles styles={{
        'html, body, #root': { height: '100%' },
        body: { margin: 0 },
        '.app-root': { minHeight: '100%', display: 'flex', flexDirection: 'column' },
        '.app-main': { flex: '1 0 auto' },
        '.app-footer': { flexShrink: 0 },
      }} />
      <AuthProvider>
        <BrowserRouter>
          <div className="app-root">
            <App />
          </div>
        </BrowserRouter>
      </AuthProvider>
    </ThemeProvider>
  </React.StrictMode>
)

--- END FILE: portofolio/frontend-portofolio/src/main.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/pages/About.jsx ---
// src/pages/About.jsx
import { useEffect, useState, useMemo } from 'react';
import { Box, CircularProgress, Typography, Paper, Divider, Container, Link } from '@mui/material';
import { fetchPublicProfile, fetchPublicSkills } from '../api/profile';
import { fetchPublicExperiences } from '../api/experiences';
import { fetchPublicAchievements } from '../api/achievements';
import ProfileHeader from '../components/public/ProfileHeader';
import SkillChips from '../components/public/SkillChips';
import ExperienceTimeline from '../components/public/ExperienceTimeline';
import { motion } from 'framer-motion';

const containerVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { staggerChildren: 0.15 } },
};

const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: { y: 0, opacity: 1 },
};

function Section({ title, children }) {
    return (
        <Box
            component={motion.div}
            variants={itemVariants}
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.2 }}
            sx={{ mt: 6 }}
        >
            <Typography
                variant="h4"
                fontWeight={800}
                sx={{
                    fontSize: { xs: '1.75rem', md: '2.125rem' },
                    mb: 3,
                    position: 'relative',
                    display: 'inline-block',
                    '&::after': {
                        content: '""',
                        position: 'absolute',
                        bottom: -4,
                        left: 0,
                        width: '50%',
                        height: '3px',
                        bgcolor: 'primary.main',
                    },
                }}
            >
                {title}
            </Typography>
            {children}
        </Box>
    );
}

export default function About() {
    const [profile, setProfile] = useState(null);
    const [skills, setSkills] = useState([]);
    const [experiences, setExperiences] = useState([]);
    const [achievements, setAchievements] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchData = async () => {
            try {
                const [p, s, e, a] = await Promise.all([
                    fetchPublicProfile(),
                    fetchPublicSkills(),
                    fetchPublicExperiences(),
                    fetchPublicAchievements(),
                ]);
                setProfile(p);
                setSkills(s);
                setExperiences(e);
                setAchievements(a);
            } finally {
                setLoading(false);
            }
        };
        fetchData();
    }, []);

    const { workExperiences, orgExperiences, educationExperiences } = useMemo(() => {
        const work = experiences.filter(e => e.type === 'Pekerjaan Penuh Waktu' || e.type === 'Magang');
        const org = experiences.filter(e => e.type === 'Organisasi');
        const edu = experiences.filter(e => e.type === 'Pendidikan');
        return { workExperiences: work, orgExperiences: org, educationExperiences: edu };
    }, [experiences]);

    const skillGroupOrder = useMemo(() => {
        try { return JSON.parse(profile?.skill_group_order) } catch { return [] }
    }, [profile]);

    if (loading) {
        return <Box sx={{ display: 'grid', placeItems: 'center', minHeight: '80vh' }}><CircularProgress /></Box>;
    }

    return (
        <Container>
            <motion.div variants={containerVariants} initial="hidden" animate="visible">
                <motion.div variants={itemVariants}><ProfileHeader profile={profile} /></motion.div>

                {profile?.bio && (<Section title="Tentang Saya"><Paper sx={{ p: { xs: 2, md: 4 } }}><Typography color="text.secondary" sx={{ whiteSpace: 'pre-wrap', lineHeight: 1.7, fontSize: '1.1rem' }}>{profile.bio}</Typography></Paper></Section>)}

                {workExperiences.length > 0 && (<Section title="Pengalaman Kerja"><ExperienceTimeline experiences={workExperiences} /></Section>)}
                {orgExperiences.length > 0 && (<Section title="Organisasi & Kepemimpinan"><ExperienceTimeline experiences={orgExperiences} /></Section>)}
                {educationExperiences.length > 0 && (<Section title="Pendidikan"><ExperienceTimeline experiences={educationExperiences} /></Section>)}

                {skills.length > 0 && (<Section title="Keahlian & Teknologi"><Paper sx={{ p: { xs: 2, md: 4 } }}><SkillChips skills={skills} groupOrder={skillGroupOrder} /></Paper></Section>)}

                {achievements.length > 0 && (<Section title="Pencapaian & Sertifikasi"><Paper sx={{ p: { xs: 2, md: 4 } }}>{achievements.map((item, index) => (<Box key={item.id} sx={{ mb: index === achievements.length - 1 ? 0 : 2 }}><Typography fontWeight={700}>{item.title}</Typography><Typography variant="body2" color="text.secondary">{item.issuer} - {new Date(item.date).getFullYear()}</Typography>{item.credential_url && <Link href={item.credential_url} target="_blank" variant="caption">Lihat Kredensial</Link>}{index !== achievements.length - 1 && <Divider sx={{ my: 2 }} />}</Box>))}</Paper></Section>)}
            </motion.div>
        </Container>
    );
}
--- END FILE: portofolio/frontend-portofolio/src/pages/About.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/pages/admin/AdminAchievements.jsx ---
/* eslint-disable no-unused-vars */
// src/pages/admin/AdminAchievements.jsx
import { useEffect, useState } from 'react';
import { Box, Button, Paper, Stack, Typography, CircularProgress, IconButton } from '@mui/material';
import { motion } from 'framer-motion';
import AddIcon from '@mui/icons-material/Add';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import { fetchAdminAchievements, createAdminAchievement, updateAdminAchievement, deleteAdminAchievement } from '../../api/achievements';
import { confirm, alert } from '../../utils/confirm';
import AchievementFormModal from '../../components/admin/AchievementFormModal';

const formatDate = (dateStr) => new Date(dateStr).toLocaleDateString('id-ID', { year: 'numeric', month: 'long' });

export default function AdminAchievements() {
    const [items, setItems] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingItem, setEditingItem] = useState(null);

    const loadItems = async () => {
        try {
            const data = await fetchAdminAchievements();
            setItems(data);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => { loadItems() }, []);

    const handleOpenModal = (item = null) => { setEditingItem(item); setIsModalOpen(true); };
    const handleCloseModal = () => { setEditingItem(null); setIsModalOpen(false); };

    const handleDelete = async (item) => {
        const res = await confirm({ title: `Hapus "${item.title}"?` });
        if (res.isConfirmed) {
            try {
                await deleteAdminAchievement(item.id);
                alert({ title: 'Sukses', text: 'Data berhasil dihapus.' });
                loadItems();
            } catch (_e) {
                alert({ title: 'Error', icon: 'error', text: 'Gagal menghapus data.' });
            }
        }
    };

    const handleSubmit = async (values) => {
        try {
            if (editingItem) {
                await updateAdminAchievement(editingItem.id, { ...editingItem, ...values });
            } else {
                await createAdminAchievement(values);
            }
            handleCloseModal();
            alert({ title: 'Sukses', text: 'Data berhasil disimpan.' });
            loadItems();
        } catch (_e) {
            alert({ title: 'Error', icon: 'error', text: 'Gagal menyimpan data.' });
        }
    };

    if (loading) return <Box sx={{ display: 'grid', placeItems: 'center', minHeight: 400 }}><CircularProgress /></Box>;

    return (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
            <Box sx={{ maxWidth: 980, mx: 'auto' }}>
                <Stack direction="row" justifyContent="space-between" alignItems="center" sx={{ mb: 3 }}>
                    <Typography variant="h5" fontWeight={800}>Kelola Pencapaian</Typography>
                    <Button startIcon={<AddIcon />} variant="contained" onClick={() => handleOpenModal()}>Tambah</Button>
                </Stack>
                <Stack spacing={2}>
                    {items.map(item => (
                        <Paper key={item.id} sx={{ p: 2, display: 'flex', alignItems: 'center' }}>
                            <Box sx={{ flex: 1 }}>
                                <Typography variant="h6" fontWeight={600}>{item.title}</Typography>
                                <Typography variant="body1" color="text.secondary">{item.issuer}</Typography>
                                <Typography variant="caption" color="text.secondary">{formatDate(item.date)}</Typography>
                            </Box>
                            <Stack direction="row" spacing={1}>
                                <IconButton onClick={() => handleOpenModal(item)}><EditIcon /></IconButton>
                                <IconButton color="error" onClick={() => handleDelete(item)}><DeleteIcon /></IconButton>
                            </Stack>
                        </Paper>
                    ))}
                </Stack>
            </Box>
            <AchievementFormModal open={isModalOpen} onClose={handleCloseModal} onSubmit={handleSubmit} initialData={editingItem} />
        </motion.div>
    );
}
--- END FILE: portofolio/frontend-portofolio/src/pages/admin/AdminAchievements.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/pages/admin/AdminExperiences.jsx ---
/* eslint-disable no-unused-vars */
// src/pages/admin/AdminExperiences.jsx
import { useEffect, useState } from 'react';
import { Box, Button, Paper, Stack, Typography, CircularProgress, IconButton } from '@mui/material';
import { motion } from 'framer-motion';
import AddIcon from '@mui/icons-material/Add';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import { fetchAdminExperiences, createAdminExperience, updateAdminExperience, deleteAdminExperience } from '../../api/experiences';
import { confirm, alert } from '../../utils/confirm';
import ExperienceFormModal from '../../components/admin/ExperienceFormModal';

const formatDate = (dateStr) => new Date(dateStr).toLocaleDateString('id-ID', { year: 'numeric', month: 'long' });

export default function AdminExperiences() {
    const [items, setItems] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingItem, setEditingItem] = useState(null);

    const loadItems = async () => {
        try {
            const data = await fetchAdminExperiences();
            setItems(data);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => { loadItems() }, []);

    const handleOpenModal = (item = null) => { setEditingItem(item); setIsModalOpen(true); };
    const handleCloseModal = () => { setEditingItem(null); setIsModalOpen(false); };

    const handleDelete = async (item) => {
        const res = await confirm({ title: `Hapus "${item.title}"?` });
        if (res.isConfirmed) {
            try {
                await deleteAdminExperience(item.id);
                alert({ title: 'Sukses', text: 'Data berhasil dihapus.' });
                loadItems();
            } catch (_e) {
                alert({ title: 'Error', icon: 'error', text: 'Gagal menghapus data.' });
            }
        }
    };

    const handleSubmit = async (values) => {
        try {
            if (editingItem) {
                await updateAdminExperience(editingItem.id, { ...editingItem, ...values });
            } else {
                await createAdminExperience(values);
            }
            handleCloseModal();
            alert({ title: 'Sukses', text: 'Data berhasil disimpan.' });
            loadItems();
        } catch (_e) {
            alert({ title: 'Error', icon: 'error', text: 'Gagal menyimpan data.' });
        }
    };

    if (loading) return <Box sx={{ display: 'grid', placeItems: 'center', minHeight: 400 }}><CircularProgress /></Box>;

    return (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
            <Box sx={{ maxWidth: 980, mx: 'auto' }}>
                <Stack direction="row" justifyContent="space-between" alignItems="center" sx={{ mb: 3 }}>
                    <Typography variant="h5" fontWeight={800}>Kelola Pengalaman</Typography>
                    <Button startIcon={<AddIcon />} variant="contained" onClick={() => handleOpenModal()}>Tambah</Button>
                </Stack>
                <Stack spacing={2}>
                    {items.map(item => (
                        <Paper key={item.id} sx={{ p: 2, display: 'flex', alignItems: 'center' }}>
                            <Box sx={{ flex: 1 }}>
                                <Typography variant="h6" fontWeight={600}>{item.title}</Typography>
                                <Typography variant="body1" color="text.secondary">{item.entity_name}</Typography>
                                <Typography variant="caption" color="text.secondary">
                                    {formatDate(item.start_date)} - {item.end_date ? formatDate(item.end_date) : 'Sekarang'}
                                </Typography>
                            </Box>
                            <Stack direction="row" spacing={1}>
                                <IconButton onClick={() => handleOpenModal(item)}><EditIcon /></IconButton>
                                <IconButton color="error" onClick={() => handleDelete(item)}><DeleteIcon /></IconButton>
                            </Stack>
                        </Paper>
                    ))}
                </Stack>
            </Box>
            <ExperienceFormModal open={isModalOpen} onClose={handleCloseModal} onSubmit={handleSubmit} initialData={editingItem} />
        </motion.div>
    );
}
--- END FILE: portofolio/frontend-portofolio/src/pages/admin/AdminExperiences.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/pages/admin/AdminProfile.jsx ---
/* eslint-disable no-unused-vars */
// src/pages/admin/AdminProfile.jsx
import { useEffect, useState, useMemo } from 'react'
import { Paper, Stack, Typography, TextField, Button, Grid, CircularProgress, Box, Divider } from '@mui/material'
import { useFormik } from 'formik'
import * as Yup from 'yup'
import { motion } from 'framer-motion'
import { fetchAdminProfile, upsertAdminProfile } from '../../api/profile'
import { fetchAdminSkills } from '../../api/skills'
import UploadButton from '../../components/admin/UploadButton'
import SocialLinksManager from '../../components/admin/SocialLinksManager'
import SkillGroupOrderManager from '../../components/admin/SkillGroupOrderManager'
import { alert } from '../../utils/confirm'

const validationSchema = Yup.object({
    full_name: Yup.string().required('Nama lengkap wajib diisi'),
    headline: Yup.string().required('Headline wajib diisi'),
});

export default function AdminProfile() {
    const [loading, setLoading] = useState(true);
    const [allSkills, setAllSkills] = useState([]);

    const formik = useFormik({
        initialValues: {
            full_name: '', headline: '', bio: '', photo_url: '',
            location: '', resume_url: '', socials: [], skill_group_order: '[]',
        },
        validationSchema,
        onSubmit: async (values, { setSubmitting }) => {
            try {
                await upsertAdminProfile(values);
                alert({ title: 'Sukses', text: 'Profil berhasil diperbarui.', icon: 'success' });
            } catch (_error) {
                alert({ title: 'Error', text: 'Gagal menyimpan profil.', icon: 'error' });
            } finally {
                setSubmitting(false);
            }
        },
    });

    useEffect(() => {
        const loadData = async () => {
            try {
                const [profileData, skillsData] = await Promise.all([
                    fetchAdminProfile(),
                    fetchAdminSkills()
                ]);

                if (profileData) {
                    formik.setValues({
                        full_name: profileData.full_name || '',
                        headline: profileData.headline || '',
                        bio: profileData.bio || '',
                        photo_url: profileData.photo_url || '',
                        location: profileData.location || '',
                        resume_url: profileData.resume_url || '',
                        socials: profileData.socials || [],
                        skill_group_order: profileData.skill_group_order || '[]',
                    }, false);
                }
                setAllSkills(skillsData);
            } finally {
                setLoading(false);
            }
        };
        loadData();
    }, []); // eslint-disable-line

    const availableGroups = useMemo(() => {
        return [...new Set(allSkills.map(s => s.group).filter(Boolean))];
    }, [allSkills]);

    const currentOrder = useMemo(() => {
        try { return JSON.parse(formik.values.skill_group_order) } catch { return [] }
    }, [formik.values.skill_group_order]);

    if (loading) {
        return <Box sx={{ display: 'grid', placeItems: 'center', minHeight: 400 }}><CircularProgress /></Box>;
    }

    return (
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }}>
            <Paper sx={{ p: { xs: 2, md: 4 }, maxWidth: 980, mx: 'auto' }}>
                <form onSubmit={formik.handleSubmit}>
                    <Stack spacing={4}>
                        <Typography variant="h5" fontWeight={800}>Kelola Profil</Typography>
                        <Grid container spacing={3}>
                            <Grid item xs={12} md={6}>
                                <Stack spacing={3}>
                                    <TextField name="full_name" label="Nama Lengkap" {...formik.getFieldProps('full_name')} error={formik.touched.full_name && !!formik.errors.full_name} helperText={formik.touched.full_name && formik.errors.full_name} fullWidth />
                                    <TextField name="headline" label="Headline" {...formik.getFieldProps('headline')} error={formik.touched.headline && !!formik.errors.headline} helperText={formik.touched.headline && formik.errors.headline} fullWidth />
                                    <TextField name="location" label="Lokasi" {...formik.getFieldProps('location')} fullWidth />
                                    <TextField name="bio" label="Bio / Tentang Saya" {...formik.getFieldProps('bio')} multiline rows={6} fullWidth />
                                </Stack>
                            </Grid>
                            <Grid item xs={12} md={6}>
                                <Stack spacing={3}>
                                    <Stack spacing={1}><Typography variant="subtitle1" fontWeight={600}>Foto Profil</Typography><TextField size="small" name="photo_url" label="URL Foto Profil" {...formik.getFieldProps('photo_url')} /><UploadButton label="Unggah Foto Baru" onUploaded={(url) => formik.setFieldValue('photo_url', url)} /></Stack>
                                    <Stack spacing={1}><Typography variant="subtitle1" fontWeight={600}>File CV</Typography><TextField size="small" name="resume_url" label="URL File CV" {...formik.getFieldProps('resume_url')} /><UploadButton label="Unggah CV Baru" onUploaded={(url) => formik.setFieldValue('resume_url', url)} /></Stack>
                                </Stack>
                            </Grid>
                            <Grid item xs={12}><Divider /></Grid>
                            <Grid item xs={12} md={6}>
                                <SocialLinksManager links={formik.values.socials} onChange={(newSocials) => formik.setFieldValue('socials', newSocials)} />
                            </Grid>
                            <Grid item xs={12} md={6}>
                                <SkillGroupOrderManager
                                    availableGroups={availableGroups}
                                    currentOrder={currentOrder}
                                    onOrderChange={(newOrder) => formik.setFieldValue('skill_group_order', JSON.stringify(newOrder))}
                                />
                            </Grid>
                        </Grid>
                        <Box sx={{ display: 'flex', justifyContent: 'flex-end', pt: 2 }}>
                            <Button type="submit" variant="contained" disabled={formik.isSubmitting}>{formik.isSubmitting ? 'Menyimpan...' : 'Simpan Perubahan'}</Button>
                        </Box>
                    </Stack>
                </form>
            </Paper>
        </motion.div>
    );
}
--- END FILE: portofolio/frontend-portofolio/src/pages/admin/AdminProfile.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/pages/admin/AdminProjects.jsx ---
/* eslint-disable no-unused-vars */
// src/pages/admin/AdminProjects.jsx
import { useEffect, useRef, useState } from 'react'
import { Box, Button, Chip, IconButton, Paper, Stack, Typography, Divider, CircularProgress } from '@mui/material'
import EditIcon from '@mui/icons-material/Edit'
import VisibilityIcon from '@mui/icons-material/Visibility'
import DeleteIcon from '@mui/icons-material/Delete'
import AddIcon from '@mui/icons-material/Add'
import DragIndicatorIcon from '@mui/icons-material/DragIndicator'
import { deleteProject, getProjectsAdmin, createProject, updateProject, reorderProjects } from '../../api/projects'
import ProjectForm from '../../components/admin/ProjectForm'
import ProjectPreview from '../../components/admin/ProjectPreview'
import { alert, confirm } from '../../utils/confirm'

export default function AdminProjects() {
    const [items, setItems] = useState([])
    const [loading, setLoading] = useState(true)
    const [editing, setEditing] = useState(false)
    const [initial, setInitial] = useState({})
    const [previewOpen, setPreviewOpen] = useState(false)
    const [previewProject, setPreviewProject] = useState(null)
    const [dragIdx, setDragIdx] = useState(null)
    const [overIdx, setOverIdx] = useState(null)
    const dragIndexRef = useRef(null)

    const fetchProjects = async () => {
        const data = await getProjectsAdmin()
        const sorted = [...(data || [])].sort((a, b) => {
            const ao = a.sort_order ?? 1e9
            const bo = b.sort_order ?? 1e9
            return ao - bo || new Date(b.created_at) - new Date(a.created_at)
        })
        setItems(sorted)
        setLoading(false)
    }

    useEffect(() => {
        fetchProjects()
    }, [])

    const handleNew = () => { setInitial({}); setEditing(true); window.scrollTo({ top: 0, behavior: 'smooth' }) }
    const handleEdit = (p) => {
        const safe = { ...p, gallery: Array.isArray(p.gallery) ? [...p.gallery] : [] }
        setInitial(safe); setEditing(true); window.scrollTo({ top: 0, behavior: 'smooth' })
    }

    const handleDelete = async (id, title) => {
        const res = await confirm({ title: `Hapus "${title}"?`, text: 'Aksi ini tidak bisa dibatalkan.' })
        if (res.isConfirmed) {
            try {
                await deleteProject(id)
                setItems((prev) => prev.filter((x) => x.id !== id))
                alert({ title: 'Sukses', text: 'Proyek berhasil dihapus.' })
            } catch (_err) {
                alert({ title: 'Error', text: 'Gagal menghapus proyek.', icon: 'error' })
            }
        }
    }

    const onSubmit = async (payload) => {
        try {
            if (initial?.id) {
                await updateProject(initial.id, payload)
            } else {
                await createProject(payload)
            }
            setEditing(false); setInitial({})
            alert({ title: 'Sukses', text: 'Proyek berhasil disimpan.' })
            fetchProjects() // Muat ulang semua untuk data terbaru
        } catch (_err) {
            alert({ title: 'Error', text: 'Gagal menyimpan proyek.', icon: 'error' })
        }
    }

    const onRowDragStart = (e, idx) => {
        dragIndexRef.current = idx; setDragIdx(idx)
        e.dataTransfer.effectAllowed = 'move'
        e.dataTransfer.setData('text/html', null)
    }
    const onRowDragOver = (e, idx) => { e.preventDefault(); setOverIdx(idx) }
    const onRowDrop = async (e, idx) => {
        e.preventDefault()
        const from = dragIndexRef.current; const to = idx
        setOverIdx(null); setDragIdx(null); dragIndexRef.current = null
        if (from === null || to === null || from === to) return

        const originalOrder = [...items]
        const next = [...items]
        const [moved] = next.splice(from, 1)
        next.splice(to, 0, moved)
        setItems(next)

        try {
            await reorderProjects(next.map((p, i) => ({ id: p.id, sort_order: i })))
        } catch {
            alert({ title: 'Error', text: 'Gagal menyimpan urutan baru.', icon: 'error' })
            setItems(originalOrder) // Rollback UI
        }
    }
    const onRowDragEnd = () => { setOverIdx(null); setDragIdx(null); dragIndexRef.current = null }

    if (loading) return <Box sx={{ display: 'grid', placeItems: 'center', minHeight: 400 }}><CircularProgress /></Box>

    return (
        <Box sx={{ maxWidth: 980, mx: 'auto' }}>
            <Stack direction="row" justifyContent="space-between" alignItems="center" sx={{ mb: 2 }}>
                <Typography variant="h5" fontWeight={800}>Kelola Projects</Typography>
                {!editing && <Button startIcon={<AddIcon />} variant="contained" onClick={handleNew}>Tambah Project</Button>}
            </Stack>

            {editing && (
                <ProjectForm
                    initial={initial}
                    onSubmit={onSubmit}
                    onCancel={() => { setEditing(false); setInitial({}) }}
                />
            )}
            {!editing && items.length > 0 && <Divider sx={{ my: 2 }} />}

            {!editing && (
                <Stack spacing={2} sx={{
                    '& .row': { transition: 'transform .18s ease, box-shadow .18s ease' },
                    '& .row.dragging': { transform: 'scale(1.01)', boxShadow: 6, opacity: 0.9, cursor: 'grabbing' },
                    '& .row.over': { boxShadow: 4 },
                }}>
                    {items.map((p, idx) => (
                        <Paper
                            key={p.id}
                            className={`row${dragIdx === idx ? ' dragging' : ''}${overIdx === idx ? ' over' : ''}`}
                            draggable
                            onDragStart={(e) => onRowDragStart(e, idx)}
                            onDragOver={(e) => onRowDragOver(e, idx)}
                            onDrop={(e) => onRowDrop(e, idx)}
                            onDragEnd={onRowDragEnd}
                            sx={{ p: 2, display: 'grid', gridTemplateColumns: 'auto 1fr auto', alignItems: 'center', gap: 2 }}
                        >
                            <Box sx={{ color: 'text.secondary', cursor: 'grab', '&:active': { cursor: 'grabbing' } }}>
                                <DragIndicatorIcon />
                            </Box>
                            <Box>
                                <Typography fontWeight={700}>{p.title}</Typography>
                                <Typography variant="body2" color="text.secondary" sx={{ mb: 1, display: '-webkit-box', WebkitBoxOrient: 'vertical', WebkitLineClamp: 2, overflow: 'hidden' }}>{p.summary}</Typography>
                                <Stack direction="row" spacing={1}>
                                    <Chip size="small" label={p.status} color={p.status === 'published' ? 'success' : 'default'} />
                                    {p.role && <Chip size="small" label={p.role} />}
                                </Stack>
                            </Box>
                            <Stack direction="row" spacing={0.5}>
                                <IconButton onClick={() => { setPreviewProject(p); setPreviewOpen(true) }}><VisibilityIcon /></IconButton>
                                <IconButton onClick={() => handleEdit(p)}><EditIcon /></IconButton>
                                <IconButton color="error" onClick={() => handleDelete(p.id, p.title)}><DeleteIcon /></IconButton>
                            </Stack>
                        </Paper>
                    ))}
                </Stack>
            )}

            <ProjectPreview open={previewOpen} onClose={() => setPreviewOpen(false)} project={previewProject || {}} />
        </Box>
    )
}
--- END FILE: portofolio/frontend-portofolio/src/pages/admin/AdminProjects.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/pages/admin/AdminSkills.jsx ---
/* eslint-disable no-unused-vars */
// src/pages/admin/AdminSkills.jsx
import { useEffect, useState, useRef, useMemo } from 'react';
import { Box, Button, Paper, Stack, Typography, CircularProgress, IconButton } from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import DragIndicatorIcon from '@mui/icons-material/DragIndicator';
import { fetchAdminSkills, createAdminSkill, updateAdminSkill, deleteAdminSkill, reorderAdminSkills } from '../../api/skills';
import { confirm, alert } from '../../utils/confirm';
import SkillFormModal from '../../components/admin/SkillFormModal';

function SkillItem({ skill, onEdit, onDelete, ...dragProps }) {
    return (
        <Paper
            {...dragProps}
            sx={{
                p: 2, display: 'flex', alignItems: 'center', gap: 1,
                cursor: 'grab',
            }}
        >
            <DragIndicatorIcon sx={{ color: 'text.secondary' }} />
            <Box sx={{ flex: 1 }}>
                <Typography variant="h6" fontWeight={600}>{skill.name}</Typography>
                <Typography variant="body2" color="text.secondary">Grup: {skill.group}</Typography>
            </Box>
            <Stack direction="row" spacing={1}>
                <IconButton onClick={onEdit}><EditIcon /></IconButton>
                <IconButton color="error" onClick={onDelete}><DeleteIcon /></IconButton>
            </Stack>
        </Paper>
    );
}

export default function AdminSkills() {
    const [skills, setSkills] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingSkill, setEditingSkill] = useState(null);
    const dragItemRef = useRef(null);
    const dragOverItemRef = useRef(null);

    const loadSkills = async () => {
        try {
            const data = await fetchAdminSkills();
            setSkills(data);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => { loadSkills() }, []);

    const groupedSkills = useMemo(() => {
        return skills.reduce((acc, skill) => {
            const group = skill.group || 'Lainnya';
            if (!acc[group]) acc[group] = [];
            acc[group].push(skill);
            return acc;
        }, {});
    }, [skills]);

    const handleOpenModal = (skill = null) => { setEditingSkill(skill); setIsModalOpen(true); };
    const handleCloseModal = () => { setEditingSkill(null); setIsModalOpen(false); };

    const handleDelete = async (skill) => {
        const res = await confirm({ title: `Hapus skill "${skill.name}"?` });
        if (res.isConfirmed) {
            try {
                await deleteAdminSkill(skill.id);
                alert({ title: 'Sukses', text: 'Skill berhasil dihapus.' });
                loadSkills();
            } catch (_e) {
                alert({ title: 'Error', icon: 'error', text: 'Gagal menghapus skill.' });
            }
        }
    };

    const handleSubmit = async (values) => {
        try {
            if (editingSkill) {
                await updateAdminSkill(editingSkill.id, values);
            } else {
                await createAdminSkill(values);
            }
            handleCloseModal();
            alert({ title: 'Sukses', text: 'Data skill berhasil disimpan.' });
            loadSkills();
        } catch (_e) {
            alert({ title: 'Error', icon: 'error', text: 'Gagal menyimpan data skill.' });
        }
    };

    const handleDragEnd = async () => {
        if (dragItemRef.current === null || dragOverItemRef.current === null) return;
        const originalSkills = [...skills];
        const fromIndex = dragItemRef.current;
        const toIndex = dragOverItemRef.current;
        dragItemRef.current = null;
        dragOverItemRef.current = null;
        if (fromIndex === toIndex) return;

        const movedItem = originalSkills.splice(fromIndex, 1)[0];
        originalSkills.splice(toIndex, 0, movedItem);
        setSkills(originalSkills); // Optimistic update

        try {
            const payload = originalSkills.map((s, i) => ({ id: s.id, sort_order: i }));
            await reorderAdminSkills(payload);
        } catch (error) {
            alert({ title: 'Error', text: 'Gagal menyimpan urutan baru.', icon: 'error' });
            setSkills(skills); // Rollback
        }
    };

    if (loading) return <Box sx={{ display: 'grid', placeItems: 'center', minHeight: 400 }}><CircularProgress /></Box>;

    return (
        <Box sx={{ maxWidth: 980, mx: 'auto' }}>
            <Stack direction="row" justifyContent="space-between" alignItems="center" sx={{ mb: 3 }}>
                <Typography variant="h5" fontWeight={800}>Kelola Skills</Typography>
                <Button startIcon={<AddIcon />} variant="contained" onClick={() => handleOpenModal()}>Tambah Skill</Button>
            </Stack>

            {Object.entries(groupedSkills).map(([group, groupSkills]) => (
                <Box key={group} sx={{ mb: 4 }}>
                    <Typography variant="h6" fontWeight={700} sx={{ mb: 2, borderBottom: 1, borderColor: 'divider', pb: 1 }}>
                        {group}
                    </Typography>
                    <Stack spacing={1}>
                        {groupSkills.map((skill) => {
                            const currentIndex = skills.findIndex(s => s.id === skill.id);
                            return (
                                <SkillItem
                                    key={skill.id}
                                    skill={skill}
                                    onEdit={() => handleOpenModal(skill)}
                                    onDelete={() => handleDelete(skill)}
                                    draggable
                                    onDragStart={() => (dragItemRef.current = currentIndex)}
                                    onDragEnter={() => (dragOverItemRef.current = currentIndex)}
                                    onDragEnd={handleDragEnd}
                                    onDragOver={(e) => e.preventDefault()}
                                />
                            );
                        })}
                    </Stack>
                </Box>
            ))}

            <SkillFormModal open={isModalOpen} onClose={handleCloseModal} onSubmit={handleSubmit} initialData={editingSkill} />
        </Box>
    );
}
--- END FILE: portofolio/frontend-portofolio/src/pages/admin/AdminSkills.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/pages/admin/Dashboard.jsx ---
// src/pages/admin/Dashboard.jsx
import { useEffect, useState } from 'react'
import { Paper, Stack, Typography, Grid, Box, CircularProgress, Button } from '@mui/material'
// eslint-disable-next-line no-unused-vars
import { motion } from 'framer-motion'
import { Link as RouterLink } from 'react-router-dom'
import ArticleIcon from '@mui/icons-material/Article'
import CodeIcon from '@mui/icons-material/Code'
import ArrowForwardIcon from '@mui/icons-material/ArrowForward'
import { getProjectsAdmin } from '../../api/projects'
import { fetchAdminSkills } from '../../api/skills'

const containerVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { staggerChildren: 0.1 } },
}

const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: { y: 0, opacity: 1 },
}

function StatCard({ icon, title, value, color }) {
    return (
        <motion.div variants={itemVariants}>
            <Paper sx={{ p: 3, display: 'flex', alignItems: 'center', gap: 3 }}>
                <Box sx={{
                    width: 56, height: 56, borderRadius: '50%', display: 'grid', placeItems: 'center',
                    bgcolor: `${color}.main`, color: 'white'
                }}>
                    {icon}
                </Box>
                <Box>
                    <Typography color="text.secondary">{title}</Typography>
                    <Typography variant="h4" fontWeight={800}>{value}</Typography>
                </Box>
            </Paper>
        </motion.div>
    )
}

export default function Dashboard() {
    const [stats, setStats] = useState({ projects: 0, published: 0, drafts: 0, skills: 0 })
    const [loading, setLoading] = useState(true)

    useEffect(() => {
        const fetchStats = async () => {
            try {
                const [projectsData, skillsData] = await Promise.all([
                    getProjectsAdmin(),
                    fetchAdminSkills(),
                ])
                setStats({
                    projects: projectsData.length,
                    published: projectsData.filter(p => p.status === 'published').length,
                    drafts: projectsData.filter(p => p.status === 'draft').length,
                    skills: skillsData.length,
                })
            } finally {
                setLoading(false)
            }
        }
        fetchStats()
    }, [])

    if (loading) {
        return <Box sx={{ display: 'grid', placeItems: 'center', minHeight: 400 }}><CircularProgress /></Box>
    }

    return (
        <motion.div variants={containerVariants} initial="hidden" animate="visible">
            <Stack spacing={4}>
                <motion.div variants={itemVariants}>
                    <Typography variant="h4" fontWeight={800}>Selamat Datang!</Typography>
                    <Typography color="text.secondary">Berikut adalah ringkasan konten portofolio Anda.</Typography>
                </motion.div>

                <Grid container spacing={3}>
                    <Grid item xs={12} sm={6} md={4}>
                        <StatCard icon={<ArticleIcon />} title="Total Proyek" value={stats.projects} color="primary" />
                    </Grid>
                    <Grid item xs={12} sm={6} md={4}>
                        <StatCard icon={<CodeIcon />} title="Total Skills" value={stats.skills} color="secondary" />
                    </Grid>
                </Grid>

                <motion.div variants={itemVariants}>
                    <Paper sx={{ p: 3 }}>
                        <Typography variant="h6" fontWeight={700} gutterBottom>Aksi Cepat</Typography>
                        <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>
                            <Button
                                component={RouterLink} to="/admin/projects"
                                variant="outlined" endIcon={<ArrowForwardIcon />}
                            >
                                Kelola Proyek
                            </Button>
                            <Button
                                component={RouterLink} to="/admin/skills"
                                variant="outlined" endIcon={<ArrowForwardIcon />}
                            >
                                Kelola Skills
                            </Button>
                            <Button
                                component={RouterLink} to="/admin/profile"
                                variant="outlined" endIcon={<ArrowForwardIcon />}
                            >
                                Edit Profil
                            </Button>
                        </Stack>
                    </Paper>
                </motion.div>
            </Stack>
        </motion.div>
    )
}
--- END FILE: portofolio/frontend-portofolio/src/pages/admin/Dashboard.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/pages/admin/Login.jsx ---
/* eslint-disable no-unused-vars */
//src/pages/admin/Login.jsx
import { useState } from 'react'
import { Box, Button, Paper, Stack, TextField, Typography } from '@mui/material'
import { useAuth } from '../../auth/useAuth'
import { useNavigate } from 'react-router-dom'

export default function Login() {
    const [email, setEmail] = useState('')
    const [password, setPassword] = useState('')
    const [error, setError] = useState('')
    const [busy, setBusy] = useState(false)
    const { login } = useAuth()
    const navigate = useNavigate()

    const submit = async (e) => {
        e.preventDefault()
        setError('')
        setBusy(true)
        try {
            await login({ email, password })
            navigate('/admin')
        } catch (err) {
            setError('Login gagal')
        } finally {
            setBusy(false)
        }
    }

    return (
        <Box sx={{ minHeight: '100vh', display: 'grid', placeItems: 'center' }}>
            <Paper sx={{ p: 3, width: 420, maxWidth: '90vw' }}>
                <Typography variant="h6" gutterBottom>Admin Login</Typography>
                <form onSubmit={submit}>
                    <Stack spacing={2}>
                        <TextField label="Email" value={email} onChange={(e) => setEmail(e.target.value)} />
                        <TextField label="Password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} />
                        {error && <Typography color="error" variant="caption">{error}</Typography>}
                        <Button type="submit" variant="contained" disabled={busy}>Login</Button>
                    </Stack>
                </form>
            </Paper>
        </Box>
    )
}
--- END FILE: portofolio/frontend-portofolio/src/pages/admin/Login.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/pages/admin/ProjectEdit.jsx ---
//src/pages/admin/ProjectEdit.jsx
import { useEffect, useMemo, useState } from 'react'
import { useNavigate, useParams } from 'react-router-dom'
import { createProject, getProjectAdminById, updateProject } from '../../api/projects'
import ProjectForm from '../../components/admin/ProjectForm'
import { Box, CircularProgress } from '@mui/material'

export default function ProjectEdit({ mode }) {
    const { id } = useParams()
    const nav = useNavigate()
    const isCreate = useMemo(() => mode === 'create', [mode])

    const [loading, setLoading] = useState(!isCreate)
    const [initial, setInitial] = useState(null)

    useEffect(() => {
        if (isCreate) return
        let ok = true
            ; (async () => {
                try {
                    const data = await getProjectAdminById(id)
                    if (ok) { setInitial(data); setLoading(false) }
                } catch {
                    if (ok) setLoading(false)
                }
            })()
        return () => { ok = false }
    }, [id, isCreate])

    const handleSubmit = async (payload) => {
        if (isCreate) {
            await createProject(payload)
        } else {
            await updateProject(id, payload)
        }
        nav('/admin/projects', { replace: true })
    }

    if (!isCreate && loading) {
        return (
            <Box sx={{ display: 'grid', placeItems: 'center', py: 6 }}>
                <CircularProgress />
            </Box>
        )
    }

    return (
        <ProjectForm
            initial={isCreate ? {} : (initial || {})}
            onSubmit={handleSubmit}
            onCancel={() => nav('/admin/projects')}
        />
    )
}

--- END FILE: portofolio/frontend-portofolio/src/pages/admin/ProjectEdit.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/pages/Home.jsx ---
/* eslint-disable no-unused-vars */
// src/pages/Home.jsx
import { useEffect, useState, useMemo } from 'react'
import { Box, Stack, Typography, Paper, Grid, CircularProgress, Chip, IconButton, Button, Container } from '@mui/material'
import { Link as RouterLink } from 'react-router-dom'
import { motion } from 'framer-motion'
import { fetchPublicProfile, fetchPublicSkills } from '../api/profile'
import ArrowForwardIcon from '@mui/icons-material/ArrowForward'
import GitHubIcon from '@mui/icons-material/GitHub'
import LinkedInIcon from '@mui/icons-material/LinkedIn'
import Footer from '../components/layout/Footer'

const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },
}

export default function Home() {
    const [profile, setProfile] = useState(null)
    const [skills, setSkills] = useState([])
    const [loading, setLoading] = useState(true)

    useEffect(() => {
        const fetchData = async () => {
            try {
                const [profileData, skillsData] = await Promise.all([
                    fetchPublicProfile(), fetchPublicSkills(),
                ])
                setProfile(profileData)
                setSkills(skillsData)
            } finally {
                setLoading(false)
            }
        }
        fetchData()
    }, [])

    const socialLinks = useMemo(() => {
        const github = profile?.socials?.find(s => s.name.toLowerCase() === 'github')
        const linkedin = profile?.socials?.find(s => s.name.toLowerCase() === 'linkedin')
        return { github, linkedin }
    }, [profile])

    if (loading) {
        return <Box sx={{ display: 'grid', placeItems: 'center', minHeight: '80vh' }}><CircularProgress size={50} /></Box>
    }

    return (
        <Box sx={{ display: 'flex', flexDirection: 'column', minHeight: '100vh' }}>
            <Container
                component="main"
                sx={{
                    flex: 1,
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'space-between',
                    py: 4
                }}
            >
                <Box>
                    <motion.div variants={itemVariants}>
                        <Box sx={{ maxWidth: 500, textAlign: { xs: 'center', md: 'left' } }}>
                            <Typography variant="h5" color="primary.main" fontWeight={600}>Hi, my name is</Typography>
                            <Typography variant="h2" fontWeight={800} sx={{ my: 1 }}>{profile?.full_name}.</Typography>
                            <Typography variant="h4" fontWeight={700} color="text.secondary">{profile?.headline}</Typography>
                            <Typography color="text.secondary" sx={{ mt: 2, mb: 3 }}>{profile?.bio?.split('\n')[0]}</Typography>
                            <Stack direction="row" spacing={1} justifyContent={{ xs: 'center', md: 'flex-start' }}>
                                {socialLinks.github && <IconButton component="a" href={socialLinks.github.url} target="_blank"><GitHubIcon /></IconButton>}
                                {socialLinks.linkedin && <IconButton component="a" href={socialLinks.linkedin.url} target="_blank"><LinkedInIcon /></IconButton>}
                            </Stack>
                        </Box>
                    </motion.div>
                </Box>

                <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>
                    <Stack spacing={3} sx={{ alignItems: 'flex-end', maxWidth: 450, width: '100%' }}>
                        <motion.div variants={itemVariants} style={{ width: '100%' }}>
                            <Paper sx={{ p: { xs: 2, md: 4 } }}>
                                <Typography variant="h5" fontWeight={700} mb={2}>Teknologi & Keahlian</Typography>
                                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                                    {skills.slice(0, 8).map(skill => <Chip key={skill.id} label={skill.name} variant="outlined" />)}
                                </Box>
                                <Button component={RouterLink} to="/about" endIcon={<ArrowForwardIcon />} sx={{ mt: 3 }}>
                                    Lihat Semua Keahlian
                                </Button>
                            </Paper>
                        </motion.div>
                        <motion.div variants={itemVariants} style={{ width: '100%' }}>
                            <Paper sx={{ p: { xs: 2, md: 4 }, textAlign: 'center' }}>
                                <Typography variant="h5" fontWeight={700}>Lihat Semua Karya Saya</Typography>
                                <Typography color="text.secondary" my={1}>Eksplorasi lebih dalam hasil kerja dan proyek pribadi saya.</Typography>
                                <Button component={RouterLink} to="/projects" variant="contained" sx={{ mt: 2 }}>
                                    Semua Proyek
                                </Button>
                            </Paper>
                        </motion.div>
                    </Stack>
                </Box>
            </Container>
            <Footer />
        </Box>
    )
}
--- END FILE: portofolio/frontend-portofolio/src/pages/Home.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/pages/ProjectDetail.jsx ---
import { useEffect, useMemo, useState } from 'react'
import { useParams, useLocation, Link as RouterLink } from 'react-router-dom'
import { Box, Button, Chip, Container, Divider, Grid, Paper, Stack, Typography, CardMedia, CircularProgress, Link } from '@mui/material'
import OpenInNewIcon from '@mui/icons-material/OpenInNew'
import GitHubIcon from '@mui/icons-material/GitHub'
import ArrowBackIcon from '@mui/icons-material/ArrowBack'
import { motion } from 'framer-motion'
import { getProjectBySlug } from '../api/projects'
import Lightbox from '../components/public/Lightbox'
import { fileUrl } from '../utils/url'
import ProjectBody from '../components/public/ProjectBody'

export default function ProjectDetail() {
    const { slug } = useParams()
    const location = useLocation()

    const [data, setData] = useState(location.state?.project || null)
    const [loading, setLoading] = useState(!location.state?.project)

    const [open, setOpen] = useState(false)
    const [index, setIndex] = useState(0)

    useEffect(() => {
        const fetchData = async () => {
            try {
                const fullData = await getProjectBySlug(slug)
                setData(fullData)
            } catch (err) {
                console.error("Failed to fetch project", err)
            } finally {
                setLoading(false)
            }
        }

        if (!data || !data.body) {
            fetchData()
        }
        window.scrollTo(0, 0)
    }, [slug, data])

    const gallery = useMemo(() => (Array.isArray(data?.gallery) ? data.gallery : []), [data])
    const techStack = useMemo(() => {
        return data?.tech_stack ? data.tech_stack.split(',').map(s => s.trim()).filter(Boolean) : []
    }, [data])

    if (loading || !data) {
        return <Box sx={{ display: 'grid', placeItems: 'center', minHeight: '80vh' }}><CircularProgress /></Box>
    }

    return (
        <Container sx={{ py: 4 }}>
            <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }}>
                <Button
                    component={RouterLink}
                    to="/projects"
                    startIcon={<ArrowBackIcon />}
                    sx={{ mb: 2 }}
                >
                    Semua Proyek
                </Button>
            </motion.div>

            <motion.div layoutId={`card-${data.slug}`}>
                <Paper sx={{ p: { xs: 2, md: 3 }, borderRadius: 4, overflow: 'hidden' }}>
                    <Typography variant="h3" fontWeight={800} gutterBottom>{data.title}</Typography>

                    {data.cover_url && (
                        <CardMedia
                            component={motion.img}
                            layoutId={`image-${data.slug}`}
                            height="350"
                            image={fileUrl(data.cover_url)}
                            alt={data.title}
                            sx={{ objectFit: 'cover', borderRadius: 2, mb: 3 }}
                        />
                    )}

                    <Grid container spacing={4}>
                        <Grid item xs={12} md={8} sx={{ order: { xs: 2, md: 1 } }}>
                            <ProjectBody body={data.body} />

                            {gallery.length > 0 && (
                                <>
                                    <Divider sx={{ my: 3 }} />
                                    <Typography variant="h6" fontWeight={700} sx={{ mb: 2 }}>Galeri</Typography>
                                    <Grid container spacing={2}>
                                        {gallery.map((src, i) => (
                                            <Grid item xs={12} sm={6} md={4} key={i}>
                                                <Box
                                                    onClick={() => { setIndex(i); setOpen(true) }}
                                                    sx={{
                                                        cursor: 'zoom-in',
                                                        borderRadius: 2,
                                                        overflow: 'hidden',
                                                        border: '1px solid',
                                                        borderColor: 'divider',
                                                        height: { xs: '250px', md: '300px' },
                                                        display: 'flex',
                                                        alignItems: 'center',
                                                        justifyContent: 'center',
                                                        bgcolor: 'action.hover',
                                                        transition: 'transform 0.2s ease-in-out',
                                                        '&:hover': {
                                                            transform: 'scale(1.03)',
                                                            boxShadow: 3
                                                        }
                                                    }}
                                                >
                                                    <img
                                                        src={fileUrl(src)}
                                                        alt={`galeri-${i}`}
                                                        loading="lazy"
                                                        style={{
                                                            objectFit: 'contain',
                                                            maxWidth: '100%',
                                                            maxHeight: '100%',
                                                            width: 'auto',
                                                            height: 'auto',
                                                            display: 'block'
                                                        }}
                                                    />
                                                </Box>
                                            </Grid>
                                        ))}
                                    </Grid>
                                </>
                            )}
                        </Grid>
                        <Grid item xs={12} md={4} sx={{ order: { xs: 1, md: 2 } }}>
                            <Box sx={{ position: 'sticky', top: '100px' }}>
                                <Paper variant="outlined" sx={{ p: 2, borderRadius: 3 }}>
                                    <Stack spacing={2}>
                                        <Typography fontWeight={600}>Ringkasan</Typography>
                                        <Typography variant="body2" color="text.secondary">{data.summary}</Typography>
                                        <Divider />
                                        <Typography fontWeight={600}>Teknologi</Typography>
                                        <Stack direction="row" spacing={1} useFlexGap flexWrap="wrap">
                                            {techStack.map((tech) => <Chip key={tech} label={tech} size="small" />)}
                                        </Stack>
                                        <Divider />
                                        <Stack spacing={1}>
                                            {data.demo_url && (
                                                <Button component={Link} href={data.demo_url} target="_blank" rel="noreferrer" endIcon={<OpenInNewIcon />} variant="contained">Lihat Demo</Button>
                                            )}
                                            {data.repo_url && (
                                                <Button component={Link} href={data.repo_url} target="_blank" rel="noreferrer" startIcon={<GitHubIcon />} variant="outlined">Lihat Kode</Button>
                                            )}
                                        </Stack>
                                    </Stack>
                                </Paper>
                            </Box>
                        </Grid>
                    </Grid>
                </Paper>
            </motion.div>
            <Lightbox open={open} images={gallery.map(fileUrl)} index={index} onClose={() => setOpen(false)} />
        </Container>
    )
}
--- END FILE: portofolio/frontend-portofolio/src/pages/ProjectDetail.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/pages/Projects.jsx ---
// src/pages/Projects.jsx
import { Box, Typography, Grid, CircularProgress, Container } from '@mui/material'
import { useEffect, useState } from 'react'
import { motion } from 'framer-motion'
import { getProjectsPublic } from '../api/projects'
import ProjectCard from '../components/public/ProjectCard'

const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
        opacity: 1,
        transition: {
            staggerChildren: 0.1,
        },
    },
}

export default function Projects() {
    const [projects, setProjects] = useState([])
    const [loading, setLoading] = useState(true)

    useEffect(() => {
        const fetchProjects = async () => {
            try {
                const data = await getProjectsPublic()
                setProjects(data || [])
            } finally {
                setLoading(false)
            }
        }
        fetchProjects()
    }, [])

    return (
        <Container sx={{ py: 4 }}>
            <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
                <Typography variant="h2" fontWeight={800} sx={{ mb: 1 }}>
                    All Projects
                </Typography>
                <Typography color="text.secondary" sx={{ mb: 4 }}>
                    Kumpulan hasil karya dan eksplorasi teknologi saya.
                </Typography>
            </motion.div>

            {loading ? (
                <Box sx={{ display: 'grid', placeItems: 'center', minHeight: 400 }}><CircularProgress /></Box>
            ) : (
                <Box
                    component={motion.div}
                    variants={containerVariants}
                    initial="hidden"
                    animate="visible"
                >
                    <Grid container spacing={3}>
                        {projects.map((p) => (
                            <Grid item xs={12} sm={6} md={4} key={p.id}>
                                <ProjectCard project={p} />
                            </Grid>
                        ))}
                    </Grid>
                </Box>
            )}
        </Container>
    )
}
--- END FILE: portofolio/frontend-portofolio/src/pages/Projects.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/providers/colorMode.js ---
//src/providers/colorMode.js
import { createContext, useContext } from 'react'

export const ColorModeContext = createContext({
    mode: 'light',
    toggle: () => { },
    setMode: () => { },
})

export const useColorMode = () => useContext(ColorModeContext)

--- END FILE: portofolio/frontend-portofolio/src/providers/colorMode.js ---

--- START FILE: portofolio/frontend-portofolio/src/providers/ColorModeProvider.jsx ---
//src/providers/ColorModeProvider.jsx
import { useEffect, useMemo, useState } from 'react'
import { ThemeProvider, CssBaseline, useMediaQuery } from '@mui/material'
import { getTheme } from '../theme'
import { ColorModeContext } from './colorMode'

export default function ColorModeProvider({ children }) {
    const prefersDark = useMediaQuery('(prefers-color-scheme: dark)')
    const [mode, setMode] = useState(() => localStorage.getItem('color-mode') || (prefersDark ? 'dark' : 'light'))

    useEffect(() => {
        const saved = localStorage.getItem('color-mode')
        if (!saved) setMode(prefersDark ? 'dark' : 'light')
    }, [prefersDark])

    useEffect(() => {
        localStorage.setItem('color-mode', mode)
        document.documentElement.setAttribute('data-color-mode', mode)
    }, [mode])

    const value = useMemo(() => ({
        mode,
        setMode,
        toggle: () => setMode(m => (m === 'light' ? 'dark' : 'light')),
    }), [mode])

    const theme = useMemo(() => getTheme(mode), [mode])

    return (
        <ColorModeContext.Provider value={value}>
            <ThemeProvider theme={theme}>
                <CssBaseline />
                {children}
            </ThemeProvider>
        </ColorModeContext.Provider>
    )
}

--- END FILE: portofolio/frontend-portofolio/src/providers/ColorModeProvider.jsx ---

--- START FILE: portofolio/frontend-portofolio/src/theme.js ---
/* eslint-disable no-unused-vars */
//src/theme.js
import { createTheme, alpha } from '@mui/material/styles'

export const getTheme = (mode = 'dark') =>
    createTheme({
        palette: {
            mode,
            primary: { main: '#7C3AED' },
            secondary: { main: '#06B6D4' },
            ...(mode === 'light'
                ? {
                    background: {
                        default: '#EEF2F6',
                        paper: 'rgba(247, 249, 252, 0.7)',
                    },
                    text: { primary: '#0F172A', secondary: '#475569' },
                    divider: 'rgba(15,23,42,.08)',
                }
                : {
                    background: { default: '#0B1020', paper: 'rgba(17, 22, 42, 0.6)' },
                    text: { primary: '#E8ECF5', secondary: '#B8C0D9' },
                    divider: 'rgba(255,255,255,.1)',
                }),
            success: { main: '#10B981' },
            error: { main: '#EF4444' },
            warning: { main: '#F59E0B' },
            info: { main: '#3B82F6' },
        },
        shape: { borderRadius: 16 },
        typography: {
            fontFamily: ['Inter', 'system-ui', 'Segoe UI', 'Roboto', 'Arial'].join(','),
            h1: { fontWeight: 800, letterSpacing: '-0.02em', fontSize: '2.4rem' },
            h2: { fontWeight: 700, letterSpacing: '-0.02em', fontSize: '2rem' },
            h3: { fontWeight: 700, fontSize: '1.6rem' },
            button: { fontWeight: 600, letterSpacing: '.01em', textTransform: 'none' },
        },
        components: {
            MuiCssBaseline: {
                styleOverrides: (t) => ({ body: { backgroundColor: t.palette.background.default } }),
            },
            MuiAppBar: {
                styleOverrides: {
                    root: ({ theme }) => ({
                        backdropFilter: 'blur(16px)', WebkitBackdropFilter: 'blur(16px)',
                        background: 'transparent',
                        borderBottom: `1px solid ${theme.palette.divider}`,
                    }),
                },
            },
            MuiPaper: {
                defaultProps: { elevation: 0 },
                styleOverrides: {
                    root: ({ theme }) => ({
                        backdropFilter: 'blur(16px)', WebkitBackdropFilter: 'blur(16px)',
                        backgroundColor: theme.palette.mode === 'dark' ? 'rgba(17, 22, 42, 0.6)' : 'rgba(247, 249, 252, 0.7)',
                        border: `1px solid ${theme.palette.divider}`,
                    }),
                },
            },
            MuiCard: { // Kartu proyek akan mewarisi style Paper, jadi kita fokus ke hover
                styleOverrides: {
                    root: {
                        backgroundColor: 'transparent',
                        // Hover effect sekarang ditangani oleh Framer Motion di komponen Home
                    },
                },
            },
            MuiButton: {
                defaultProps: { disableElevation: true },
                styleOverrides: {
                    root: {
                        borderRadius: 10, paddingInline: 16,
                        transition: 'transform .15s ease, box-shadow .2s ease',
                        '&:active': { transform: 'translateY(1px)' },
                    },
                    containedPrimary: { color: '#fff' },
                },
            },
            MuiContainer: {
                styleOverrides: { root: { '@media (max-width:600px)': { paddingInline: 12 } } },
            },
        },
    })
--- END FILE: portofolio/frontend-portofolio/src/theme.js ---

--- START FILE: portofolio/frontend-portofolio/src/utils/confirm.js ---
//src/utils/confirm.js
import Swal from 'sweetalert2'
import withReactContent from 'sweetalert2-react-content'

const MySwal = withReactContent(Swal)

const isDark = () => document.documentElement.getAttribute('data-color-mode') === 'dark'

export const confirm = (opts = {}) =>
    MySwal.fire({
        title: opts.title || 'Are you sure?',
        text: opts.text || '',
        icon: opts.icon || 'warning',
        showCancelButton: true,
        confirmButtonText: opts.confirmText || 'Confirm',
        cancelButtonText: opts.cancelText || 'Cancel',
        background: isDark() ? '#0B1020' : '#FFFFFF',
        color: isDark() ? '#E8ECF5' : '#0F172A',
        confirmButtonColor: '#7C3AED',
        cancelButtonColor: '#475569',
        customClass: {
            popup: 'swal2-rounded',
            title: 'swal2-strong',
        },
    })

export const alert = (opts = {}) =>
    MySwal.fire({
        title: opts.title || 'Done',
        text: opts.text || '',
        icon: opts.icon || 'success',
        background: isDark() ? '#0B1020' : '#FFFFFF',
        color: isDark() ? '#E8ECF5' : '#0F172A',
        confirmButtonColor: '#7C3AED',
    })

--- END FILE: portofolio/frontend-portofolio/src/utils/confirm.js ---

--- START FILE: portofolio/frontend-portofolio/src/utils/slugify.js ---
export function slugify(input = '') {
    return String(input)
        .toLowerCase()
        .normalize('NFKD')
        .replace(/[\u0300-\u036f]/g, '')
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/^-+|-+$/g, '')
        .replace(/-{2,}/g, '-');
}

export const isValidSlug = (s) => /^[a-z0-9]+(?:-[a-z0-9]+)*$/.test(String(s));

--- END FILE: portofolio/frontend-portofolio/src/utils/slugify.js ---

--- START FILE: portofolio/frontend-portofolio/src/utils/url.js ---
//src/utils/url.js
export function fileUrl(u) {
    if (!u) return ''
    if (u.startsWith('http://') || u.startsWith('https://')) return u
    if (u.startsWith('/uploads/')) return `http://localhost:8080${u}`
    return u
}

--- END FILE: portofolio/frontend-portofolio/src/utils/url.js ---

--- START FILE: portofolio/frontend-portofolio/vite.config.js ---
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:8080',
        changeOrigin: true,
      },
      '/uploads': {
        target: 'http://localhost:8080',
        changeOrigin: true,
      },
    },
  },
})

--- END FILE: portofolio/frontend-portofolio/vite.config.js ---

